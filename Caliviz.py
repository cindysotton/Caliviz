# import des packages
import streamlit as st
from PIL import Image
from streamlit_option_menu import option_menu
import pandas as pd
import numpy as np
import plotly.express as px
import matplotlib.pyplot as plt
import matplotlib.colors as colors


####### MISE EN FORME DU STREAMLIT
# param√©trage page d'accueil
st.set_page_config(page_title='Caliviz',
                   page_icon='üåΩ', 
                   layout="wide",
                   initial_sidebar_state="expanded",
    )

# logo ANSES
width = 100
st.image("media/Logo_Anses.png", width=width)

# param√©trage du menu
selected = option_menu(None, ['Pr√©sentation du projet','Les substances','Contamination','Aliments contributeurs','Donn√©es - M√©thodologie'],
    icons=['house',"eyedropper",'basket','funnel','clipboard-data','envelope-fill'],
    menu_icon="cast", 
    default_index=0, 
    orientation="horizontal",
    styles={
                "icon": {"color": "#blank", "font-size": "13px"},
                "nav-link": {
                    "font-size": "13px",
                    "text-align": "center",
                    "margin": "0px",
                    "--hover-color": "#FF9940",
                },
                "nav-link-selected": {"background-color": "#FF9940"},        
            },)

# couleur des onglets du menu
flierprops = dict(marker="X", markerfacecolor='orange', markersize=12,
                  linestyle='none')


#######
####### DATAFRAME √† modifier en concervant le nom attribu√©
## Famille des Contaminents Inorg et Mineraux
df_ino = pd.read_csv('Contamination/Contaminants inorg et mineraux.csv')

# Renommer les colonnes
df_ino = df_ino.rename(columns={'Libell√©' : 'Aliment',"Groupe de la nomenclature INCA 2":"Groupe"})
#Suppression des lignes avec la Valeur NR
df_ino = df_ino.drop(df_ino[df_ino["Contamination rapport√©e"] == "NR"].index)
#Changer le type des colonnes LB UB MB en valeur d√©cimale
df_ino['UB'] = df_ino['UB'].astype('float')
df_ino['LB'] = df_ino['LB'].astype('float')
df_ino['MB'] = df_ino['MB'].astype('float')
# Supression des NaN
df_ino= df_ino.replace(to_replace=0, value=np.nan)
df_ino = df_ino.dropna(axis = 0, how = 'all', subset = ['LB', 'UB', 'MB'])
#Suppression des colonnes qui sont inutiles dans le cadre de la repr√©sentation graphique : Date, R√©gion, Vague
df_ino = df_ino.drop(["Date", "R√©gion", "Vague","Unit√©","Contamination rapport√©e"], axis=1)
#Fusionner les lignes (moyenne) pour avoir un d√©tail r√©gional et national par aliment
df_ino = df_ino.groupby(["Groupe","Aliment","Type","Famille de substances","Substance"], as_index=False).mean()
# Cr√©er un dictionnaire √† partir des colonnes "Substance" et "nom substance"
dictionnaire = {'Ag': 'Argent', 'Al': 'Aluminium', 'As': 'Arsenic', 'Ba': 'Baryum', 'Ca': 'Calcium', 'Cd': 'Cadmium', 'Co': 'Cobalt', 'Cr': 'Chromium', 'Cu': 'Cuivre', 'Fe': 'Fer', 'Ga': 'Gallium', 'Ge': 'Germanium', 'Hg': 'Mercure', 'K': 'Potassium', 'Li': 'Lithium', 'Mg': 'Magn√©sium', 'Mn': 'Manganese', 'Mo': 'Molybd√®ne', 'Na': 'Sodium', 'Ni': 'Nickel', 'Pb': 'Plomb', 'Sb': 'Antimoine', 'Se': 'Selenium', 'Sn': 'Etain', 'Sr': 'Strontium', 'Te': 'Tellure', 'V': 'Vanadium', 'Zn': 'Zinc', 'AN': 'Anthracene', 'BaA': 'Benzo(a)Anthrac√®ne', 'BaP': 'Benzo[a]Pyr√®ne', 'BbF': 'Benzo(b)fluoranth√®ne', 'BcFL': 'Benzo[c]fluorene', 'BghiP': 'Benzo[ghi]perylene', 'BjF': 'Benzo(j)fluoranth√®ne', 'BkF': 'Benzo(k)fluoranth√®ne', 'CHR': 'Chrys√®ne', 'CPP': 'Cyclopenta[cd]pyrene', 'DbaeP': 'Dibenzo[a,e]pyrene', 'DBahA': 'Dibenz[a,h]anthracene', 'DbahP': 'DiBenzo[a,h]Pyr√®ne', 'DbaiP': 'Dibenzo[a,i]pyrene', 'DbalP': 'Dibenzo[a,l]pyrene', 'FA': 'Fluoranthene', 'IP': 'Idenopyrene', 'MCH': '5-methylchrysene', 'PHE': 'Phenanthrene', 'PY': 'Pyrene', '15-Ac-DON': '15-ac√©tyld√©oxynival√©nol', '3-Ac-DON': '3-ac√©tyld√©oxynival√©nol', 'AFB1': 'Aflatoxines B1', 'AFB2': 'Aflatoxines B2', 'AFG1': 'Aflatoxines G1', 'AFG2': 'Aflatoxines G2', 'AFM1': 'Aflatoxines M1', 'alpha-ZAL': 'Alpha z√©aralanol', 'alpha-ZOL': 'Alpha z√©aral√©nol', 'beta-ZAL': 'B√™ta z√©aralanol', 'beta-ZOL': 'B√™ta z√©aral√©nol', 'DAS': 'diac√©toxyscirp√©nol', 'DOM1': 'd√©riv√© d√©√©poxyde du DON', 'DON': 'd√©oxynival√©nol', 'FB1': 'Fumonisine B1', 'FB2': 'Fumonisine B2', 'HT2': 'Toxine HT2', 'MAS': 'monoac√©toxyscirp√©nol', 'NIV': 'Nivalenol', 'OTA': 'Ochratoxine A', 'OTB': 'Ochratoxine B', 'Pat': 'Patuline', 'T2': 'Toxine T2', 'Ver': 'Verrucarol', 'ZEA': 'z√©aral√©none', 'PFBA': 'Acide perfluorobutano√Øque', 'PFBS': 'Perfluorobutane sulfonate', 'PFDA': 'Acide perfluorodecano√Øque', 'PFDoA': 'Acide perfluorododecano√Øque', 'PFDS': 'Perfluorodecane sulfonate', 'PFHpA': 'Acide perfluoroheptano√Øque', 'PFHpS': 'Perfluorohptane sulfonate', 'PFHxA': 'Acide perfluorohexano√Øque', 'PFHxS': 'Perfluorohexane sulfonate', 'PFNA': 'Acide perfluorononano√Øque', 'PFOA': 'Acide perfluoroocano√Øque', 'PFOS': 'Perfluorooctane sulfonate', 'PFPA': 'Acide perfluoropentano√Øque', 'PFTeDA': 'Acide perfluorotetradecano√Øque', 'PFTrDA': 'Acide perfluorotridecano√Øque', 'PFUnA': 'Acide perfluoroundecano√Øque'}
#Remplacer les abr√©viations des Substances par leurs noms complet
df_ino['Substance'] = df_ino['Substance'].replace(dictionnaire)

# Garder juste une ligne entre R et N
# Filtrer les lignes avec le 'Type' R
rows_to_remove = df_ino[df_ino['Type'] == 'R']
# S√©lectionner les colonnes pour l'identification des doublons
cols_to_check = ['Groupe', 'Aliment', 'Famille de substances', 'Substance']
# Identifier les lignes √† supprimer avec le m√™me 'Groupe', 'Aliment','Famille de substances' et 'Substance' pour les deux 'Types' R et N
duplicated_rows = df_ino[df_ino.duplicated(subset=cols_to_check, keep=False)]
# Filtrer les lignes √† supprimer avec le 'Type' R
duplicated_rows_to_remove = duplicated_rows[duplicated_rows['Type'] == 'R']
# Supprimer les lignes avec le 'Type' R
df_ino = df_ino.drop(duplicated_rows_to_remove.index)

## Famille des Acrylamide
df_accry = pd.read_csv('Contamination/Acrylamide.csv')

# Renommer les colonnes
df_accry = df_accry.rename(columns={'Libell√©' : 'Aliment',"Groupe de la nomenclature INCA 2":"Groupe"})
#Suppression des lignes avec la Valeur NR
df_accry = df_accry.drop(df_accry[df_accry["Contamination rapport√©e"] == "NR"].index)
#Changer le type des colonnes LB UB MB en valeur d√©cimale
df_accry['UB'] = df_accry['UB'].astype('float')
df_accry['LB'] = df_accry['LB'].astype('float')
df_accry['MB'] = df_accry['MB'].astype('float')
# Supression des NaN
df_accry= df_accry.replace(to_replace=0, value=np.nan)
df_accry = df_accry.dropna(axis = 0, how = 'all', subset = ['LB', 'UB', 'MB'])
#Suppression des colonnes qui sont inutiles dans le cadre de la repr√©sentation graphique : Date, R√©gion, Vague
df_accry = df_accry.drop(["Date", "R√©gion", "Vague","Unit√©","Contamination rapport√©e"], axis=1)
#Fusionner les lignes (moyenne) pour avoir un d√©tail r√©gional et national par aliment
df_accry = df_accry.groupby(["Groupe","Aliment","Type","Famille de substances","Substance"], as_index=False).mean()

# Garder juste une ligne entre R et N
# Filtrer les lignes avec le 'Type' R
rows_to_remove = df_accry[df_accry['Type'] == 'R']
# S√©lectionner les colonnes pour l'identification des doublons
cols_to_check = ['Groupe', 'Aliment', 'Famille de substances', 'Substance']
# Identifier les lignes √† supprimer avec le m√™me 'Groupe', 'Aliment','Famille de substances' et 'Substance' pour les deux 'Types' R et N
duplicated_rows = df_accry[df_accry.duplicated(subset=cols_to_check, keep=False)]
# Filtrer les lignes √† supprimer avec le 'Type' R
duplicated_rows_to_remove = duplicated_rows[duplicated_rows['Type'] == 'R']
# Supprimer les lignes avec le 'Type' R
df_accry = df_accry.drop(duplicated_rows_to_remove.index)


## Famille des Additifs
df_addi = pd.read_csv('Contamination/Additifs.csv')

# Renommer les colonnes
df_addi = df_addi.rename(columns={'Libell√©' : 'Aliment',"Groupe de la nomenclature INCA 2":"Groupe"})
# Renommer les modalit√©s trop longue:
df_addi = df_addi.replace(to_replace=['Sulfites   (E220, E221, E222, E223, E224, E226, E227 et E228)','Nitrites  (E249-250)'], value=['Sulfites','Nitrites'])
#Suppression des lignes avec la Valeur NR
df_addi = df_addi.drop(df_addi[df_addi["Contamination rapport√©e"] == "NR"].index)
#Changer le type des colonnes LB UB MB en valeur d√©cimale
df_addi['UB'] = df_addi['UB'].astype('float')
df_addi['LB'] = df_addi['LB'].astype('float')
df_addi['MB'] = df_addi['MB'].astype('float')
# Supression des NaN
df_addi= df_addi.replace(to_replace=0, value=np.nan)
df_addi = df_addi.dropna(axis = 0, how = 'all', subset = ['LB', 'UB', 'MB'])
#Suppression des colonnes qui sont inutiles dans le cadre de la repr√©sentation graphique : Date, R√©gion, Vague
df_addi = df_addi.drop(["Date", "R√©gion", "Vague","Unit√©","Contamination rapport√©e"], axis=1)
#Fusionner les lignes (moyenne) pour avoir un d√©tail r√©gional et national par aliment
df_addi = df_addi.groupby(["Groupe","Aliment","Type","Famille de substances","Substance"], as_index=False).mean()

# Garder juste une ligne entre R et N
# Filtrer les lignes avec le 'Type' R
rows_to_remove = df_addi[df_addi['Type'] == 'R']
# S√©lectionner les colonnes pour l'identification des doublons
cols_to_check = ['Groupe', 'Aliment', 'Famille de substances', 'Substance']
# Identifier les lignes √† supprimer avec le m√™me 'Groupe', 'Aliment','Famille de substances' et 'Substance' pour les deux 'Types' R et N
duplicated_rows = df_addi[df_addi.duplicated(subset=cols_to_check, keep=False)]
# Filtrer les lignes √† supprimer avec le 'Type' R
duplicated_rows_to_remove = duplicated_rows[duplicated_rows['Type'] == 'R']
# Supprimer les lignes avec le 'Type' R
df_addi = df_addi.drop(duplicated_rows_to_remove.index)

## Famille des Bromes
df_bro = pd.read_csv('Contamination/Bromes.csv')

# Renommer les colonnes
df_bro = df_bro.rename(columns={'Libell√©' : 'Aliment',"Groupe de la nomenclature INCA 2":"Groupe"})
#Suppression des lignes avec la Valeur NR
df_bro = df_bro.drop(df_bro[df_bro["Contamination rapport√©e"] == "NR"].index)
#Changer le type des colonnes LB UB MB en valeur d√©cimale
df_bro['UB'] = df_bro['UB'].astype('float')
df_bro['LB'] = df_bro['LB'].astype('float')
df_bro['MB'] = df_bro['MB'].astype('float')
# Supression des NaN
df_bro= df_bro.replace(to_replace=0, value=np.nan)
df_bro = df_bro.dropna(axis = 0, how = 'all', subset = ['LB', 'UB', 'MB'])
#Suppression des colonnes qui sont inutiles dans le cadre de la repr√©sentation graphique : Date, R√©gion, Vague
df_bro = df_bro.drop(["Date", "R√©gion", "Vague","Unit√©","Contamination rapport√©e"], axis=1)
#Fusionner les lignes (moyenne) pour avoir un d√©tail r√©gional et national par aliment
df_bro = df_bro.groupby(["Groupe","Aliment","Type","Famille de substances","Substance"], as_index=False).mean()

# Garder juste une ligne entre R et N
# Filtrer les lignes avec le 'Type' R
rows_to_remove = df_bro[df_bro['Type'] == 'R']
# S√©lectionner les colonnes pour l'identification des doublons
cols_to_check = ['Groupe', 'Aliment', 'Famille de substances', 'Substance']
# Identifier les lignes √† supprimer avec le m√™me 'Groupe', 'Aliment','Famille de substances' et 'Substance' pour les deux 'Types' R et N
duplicated_rows = df_bro[df_bro.duplicated(subset=cols_to_check, keep=False)]
# Filtrer les lignes √† supprimer avec le 'Type' R
duplicated_rows_to_remove = duplicated_rows[duplicated_rows['Type'] == 'R']
# Supprimer les lignes avec le 'Type' R
df_bro = df_bro.drop(duplicated_rows_to_remove.index)


## Famille des Dioxines PCB
df_dio = pd.read_csv('Contamination/Dioxines PCB.csv')

# Renommer les colonnes
df_dio = df_dio.rename(columns={'Libell√©' : 'Aliment',"Groupe de la nomenclature INCA 2":"Groupe"})
#Suppression des lignes avec la Valeur NR
df_dio = df_dio.drop(df_dio[df_dio["Contamination rapport√©e"] == "NR"].index)
#Changer le type des colonnes LB UB MB en valeur d√©cimale
df_dio['UB'] = df_dio['UB'].astype('float')
df_dio['LB'] = df_dio['LB'].astype('float')
df_dio['MB'] = df_dio['MB'].astype('float')
# Supression des NaN
df_dio= df_dio.replace(to_replace=0, value=np.nan)
df_dio = df_dio.dropna(axis = 0, how = 'all', subset = ['LB', 'UB', 'MB'])
#Suppression des colonnes qui sont inutiles dans le cadre de la repr√©sentation graphique : Date, R√©gion, Vague
df_dio = df_dio.drop(["Date", "R√©gion", "Vague","Unit√©","Contamination rapport√©e"], axis=1)
#Fusionner les lignes (moyenne) pour avoir un d√©tail r√©gional et national par aliment
df_dio = df_dio.groupby(["Groupe","Aliment","Type","Famille de substances","Substance"], as_index=False).mean()

# Garder juste une ligne entre R et N
# Filtrer les lignes avec le 'Type' R
rows_to_remove = df_dio[df_dio['Type'] == 'R']
# S√©lectionner les colonnes pour l'identification des doublons
cols_to_check = ['Groupe', 'Aliment', 'Famille de substances', 'Substance']
# Identifier les lignes √† supprimer avec le m√™me 'Groupe', 'Aliment','Famille de substances' et 'Substance' pour les deux 'Types' R et N
duplicated_rows = df_dio[df_dio.duplicated(subset=cols_to_check, keep=False)]
# Filtrer les lignes √† supprimer avec le 'Type' R
duplicated_rows_to_remove = duplicated_rows[duplicated_rows['Type'] == 'R']
# Supprimer les lignes avec le 'Type' R
df_dio = df_dio.drop(duplicated_rows_to_remove.index)


## Famille des HAP
df_hap = pd.read_csv('Contamination/HAP.csv')

# Renommer les colonnes
df_hap = df_hap.rename(columns={'Libell√©' : 'Aliment',"Groupe de la nomenclature INCA 2":"Groupe"})
#Suppression des lignes avec la Valeur NR
df_hap = df_hap.drop(df_hap[df_hap["Contamination rapport√©e"] == "NR"].index)
#Changer le type des colonnes LB UB MB en valeur d√©cimale
df_hap['UB'] = df_hap['UB'].astype('float')
df_hap['LB'] = df_hap['LB'].astype('float')
df_hap['MB'] = df_hap['MB'].astype('float')
# Supression des NaN
df_hap = df_hap.replace(to_replace=0, value=np.nan)
df_hap = df_hap.dropna(axis = 0, how = 'all', subset = ['LB', 'UB', 'MB'])
#Suppression des colonnes qui sont inutiles dans le cadre de la repr√©sentation graphique : Date, R√©gion, Vague
df_hap = df_hap.drop(["Date", "R√©gion", "Vague","Unit√©","Contamination rapport√©e"], axis=1)
#Fusionner les lignes (moyenne) pour avoir un d√©tail r√©gional et national par aliment
df_hap = df_hap.groupby(["Groupe","Aliment","Type","Famille de substances","Substance"], as_index=False).mean()

# Garder juste une ligne entre R et N
# Filtrer les lignes avec le 'Type' R
rows_to_remove = df_hap[df_hap['Type'] == 'R']
# S√©lectionner les colonnes pour l'identification des doublons
cols_to_check = ['Groupe', 'Aliment', 'Famille de substances', 'Substance']
# Identifier les lignes √† supprimer avec le m√™me 'Groupe', 'Aliment','Famille de substances' et 'Substance' pour les deux 'Types' R et N
duplicated_rows = df_hap[df_hap.duplicated(subset=cols_to_check, keep=False)]
# Filtrer les lignes √† supprimer avec le 'Type' R
duplicated_rows_to_remove = duplicated_rows[duplicated_rows['Type'] == 'R']
# Supprimer les lignes avec le 'Type' R
df_hap = df_hap.drop(duplicated_rows_to_remove.index)


## Famille des Perfluores
df_per = pd.read_csv('Contamination/Perfluores.csv')

# Renommer les colonnes
df_per = df_per.rename(columns={'Libell√©' : 'Aliment',"Groupe de la nomenclature INCA 2":"Groupe"})
#Suppression des lignes avec la Valeur NR
df_per = df_per.drop(df_per[df_per["Contamination rapport√©e"] == "NR"].index)
#Changer le type des colonnes LB UB MB en valeur d√©cimale
df_per['UB'] = df_per['UB'].astype('float')
df_per['LB'] = df_per['LB'].astype('float')
df_per['MB'] = df_per['MB'].astype('float')
# Supression des NaN
df_per  = df_per.replace(to_replace=0, value=np.nan)
df_per = df_per.dropna(axis = 0, how = 'all', subset = ['LB', 'UB', 'MB'])
#Suppression des colonnes qui sont inutiles dans le cadre de la repr√©sentation graphique : Date, R√©gion, Vague
df_per = df_per.drop(["Date", "R√©gion", "Vague","Unit√©","Contamination rapport√©e"], axis=1)
#Fusionner les lignes (moyenne) pour avoir un d√©tail r√©gional et national par aliment
df_per = df_per.groupby(["Groupe","Aliment","Type","Famille de substances","Substance"], as_index=False).mean()

# Garder juste une ligne entre R et N
# Filtrer les lignes avec le 'Type' R
rows_to_remove = df_per[df_per['Type'] == 'R']
# S√©lectionner les colonnes pour l'identification des doublons
cols_to_check = ['Groupe', 'Aliment', 'Famille de substances', 'Substance']
# Identifier les lignes √† supprimer avec le m√™me 'Groupe', 'Aliment','Famille de substances' et 'Substance' pour les deux 'Types' R et N
duplicated_rows = df_per[df_per.duplicated(subset=cols_to_check, keep=False)]
# Filtrer les lignes √† supprimer avec le 'Type' R
duplicated_rows_to_remove = duplicated_rows[duplicated_rows['Type'] == 'R']
# Supprimer les lignes avec le 'Type' R
df_per = df_per.drop(duplicated_rows_to_remove.index)


## Famille des Pesticides
df_pesti1 = pd.read_csv('Contamination/Pesticides1.csv')
df_pesti2 = pd.read_csv('Contamination/Pesticides2.csv')
df_pesti = pd.concat([df_pesti1, df_pesti2])
df_pesti = df_pesti.reset_index(drop=True)


# Renommer les colonnes
df_pesti = df_pesti.rename(columns={'Libell√©' : 'Aliment',"Groupe de la nomenclature INCA 2":"Groupe"})
#Suppression des lignes avec la Valeur NR
df_pesti = df_pesti.drop(df_pesti[df_pesti["Contamination rapport√©e"] == "NR"].index)
#Changer le type des colonnes LB UB MB en valeur d√©cimale
df_pesti['UB'] = df_pesti['UB'].astype('float')
df_pesti['LB'] = df_pesti['LB'].astype('float')
df_pesti['MB'] = df_pesti['MB'].astype('float')
# Supression des NaN
df_pesti  = df_pesti.replace(to_replace=0, value=np.nan)
df_pesti = df_pesti.dropna(axis = 0, how = 'all', subset = ['LB', 'UB', 'MB'])
#Suppression des colonnes qui sont inutiles dans le cadre de la repr√©sentation graphique : Date, R√©gion, Vague
df_pesti = df_pesti.drop(["Date", "R√©gion", "Vague","Unit√©","Contamination rapport√©e"], axis=1)
#Fusionner les lignes (moyenne) pour avoir un d√©tail r√©gional et national par aliment
df_pesti = df_pesti.groupby(["Groupe","Aliment","Type","Famille de substances","Substance"], as_index=False).mean()

# Garder juste une ligne entre R et N
# Filtrer les lignes avec le 'Type' R
rows_to_remove = df_pesti[df_pesti['Type'] == 'R']
# S√©lectionner les colonnes pour l'identification des doublons
cols_to_check = ['Groupe', 'Aliment', 'Famille de substances', 'Substance']
# Identifier les lignes √† supprimer avec le m√™me 'Groupe', 'Aliment','Famille de substances' et 'Substance' pour les deux 'Types' R et N
duplicated_rows = df_pesti[df_pesti.duplicated(subset=cols_to_check, keep=False)]
# Filtrer les lignes √† supprimer avec le 'Type' R
duplicated_rows_to_remove = duplicated_rows[duplicated_rows['Type'] == 'R']
# Supprimer les lignes avec le 'Type' R
df_pesti = df_pesti.drop(duplicated_rows_to_remove.index)




### Fichier contribution
# Contribution LB et UB
df_contrib_LB_UB = pd.read_csv('Aliments_Contributeurs/Contribution_EAT2_LB_UB.csv')
# Contribution MB
df_contrib_MB = pd.read_csv('Aliments_Contributeurs/Contribution_EAT2_MB.csv')
###

#######


######## Pr√©sentation du projet
# Choix de l'onglet pour rajouter le contenu
if selected == "Pr√©sentation du projet":
    st.title("Caliviz")
    st.header("Outil interactif permettant la visualisation des substances chimiques auxquelles est expos√©e la population fran√ßaise via son alimentation")
    st.image("media/alimentation-banderole.jpg", use_column_width=True)
    st.subheader("Enjeux")
    st.markdown("Selon les r√©sultats de la derni√®re √©dition de l‚Äô√©tude de l‚Äôalimentation totale (EAT), le risque sanitaire ne peut √™tre exclu dans certains groupes de la population pour 12 substances pr√©sentes dans notre alimentation courante. Aujourd‚Äôhui, la surveillance alimentaire est r√©alis√©e al√©atoirement. Une optimisation de la surveillance via l‚Äôidentification et le ciblage des couples aliments/substances qui posent probl√®me est donc d‚Äôutilit√© publique, visant in fine √† prot√©ger le consommateur.")
    st.markdown("**Comment optimiser la s√©curit√© sanitaire des aliments et la surveillance des couples aliments/substances qui posent v√©ritablement probl√®me ?**")

    st.subheader("Qu'est ce que l'Etude de l'Alimentation Totale ? (EAT)")
    st.markdown("L‚ÄôAnses a pour mission de contribuer √† assurer la s√©curit√© sanitaire dans les domaines de l‚Äôalimentation, de l‚Äôenvironnement et du travail. Dans ce cadre, elle a lanc√© en 2006 sa deuxi√®me √©tude de l‚Äôalimentation totale (EAT 2), ayant pour objectifs d‚Äôune part de d√©crire les expositions alimentaires de la population fran√ßaise √† des substances d‚Äôint√©r√™t en termes de sant√© publique, d‚Äôautre part de caract√©riser les risques sanitaires li√©s √† l‚Äôalimentation et associ√©s √† ces substances [...]")
    url = "https://www.anses.fr/fr/content/%C3%A9tude-de-l%E2%80%99alimentation-totale-eat-2-l%E2%80%99anses-met-%C3%A0-disposition-les-donn%C3%A9es-de-son-analyse"
    st.markdown("[Lire la suite de l'article](%s)" % url)

    st.subheader("Quelques chiffres")
    col1, col2, col3, col4, col5 = st.columns(5)
    # chiffres en orange
    st.markdown("""
    <style>
    .big-font {
        font-size:40px !important;
        color : orange;
        text-align : center;
        padding-bottom: 0rem;
 
    }
    </style>
    """, unsafe_allow_html=True)

    # texte
    st.markdown("""
    <style>
    .texte {
        font-size:20px !important;
        text-align : center;

    }
    </style>
    """, unsafe_allow_html=True)

    with col1:
        st.markdown('<p class="big-font">212</p><p class="texte">aliments</p>', unsafe_allow_html=True)
    with col2:
        st.markdown('<p class="big-font">1319</p><p class="texte">√©chantillons</p>', unsafe_allow_html=True)
    with col3:
        st.markdown('<p class="big-font">445</p><p class="texte">substances</p>', unsafe_allow_html=True)
    with col4:
        st.markdown('<p class="big-font"> 250 000</p><p class="texte">r√©sultalts analytiques</p>', unsafe_allow_html=True)
    with col5:
        st.markdown('<p class="big-font">8</p><p class="texte">r√©gions</p>', unsafe_allow_html=True)



#######


######## Les substances (et leurs risques)
if selected == "Les substances":
    st.header("Substances chimiques et risques sanitaires")

    # ajout d'un menu pour filter la famille de substances
    col1, col2, col3= st.columns(3)

    with col3:
        substances = st.selectbox(
        "Choix de la famille de substances",
        ('Contaminants inorganiques et min√©raux',))#'Acrylamide', 'HAP', 'Dioxines, PCB','Perfluor√©s','Brom√©s','Phytoestrog√®nes','Mycotoxines','Additifs','Pesticides'))

    #if substances == "Acrylamide":


    #if substances == "HAP":

    
    #if substances == "Dioxines, PCB":


    #if substances == "Perfluor√©s":

    
    #if substances == "Brom√©s":


    if substances == "Contaminants inorganiques et min√©raux":
        st.markdown("***L‚Äôarsenic (As)*** est un √©l√©ment pr√©sent dans la cro√ªte terrestre. Il provient √©galement des activit√©s industrielles, de la combustion de produits fossiles, d'anciennes utilisations agricoles, etc. Il existe sous diff√©rentes formes chimiques, organiques ou inorganiques. Par ingestion, l‚Äôarsenic peut entra√Æner des l√©sions cutan√©es, des cancers, une toxicit√© sur le d√©veloppement, une neurotoxicit√©, des maladies cardiovasculaires, une perturbation du m√©tabolisme du glucose et du diab√®te.")
        st.markdown("***Le plomb (Pb)*** est un m√©tal naturellement pr√©sent dans la cro√ªte terrestre. Son utilisation intensive par l‚Äôhomme (activit√©s mini√®res et industrielles : fonderies, accumulateurs, pigments, alliages, munitions, etc.) est √† l‚Äôorigine d‚Äôune forte dispersion dans l‚Äôenvironnement. L‚Äôhomme y est expos√© principalement par les aliments et l‚Äôeau qu‚Äôil consomme, mais aussi via l‚Äôair, le sol et les poussi√®res. Du fait de son interdiction depuis la fin des ann√©es 90 dans l‚Äôessence automobile, les peintures utilis√©es √† l‚Äôint√©rieur des habitations et les canalisations d‚Äôeau, le niveau d‚Äôexposition a fortement diminu√© ces dix derni√®res ann√©es. Chez l‚Äôhomme, le principal organe cible est le syst√®me nerveux central, en particulier au cours du d√©veloppement chez le foetus et le jeune enfant. Chez l‚Äôadulte, le plomb a des effets sur les reins et sur le syst√®me cardiovasculaire.")
        st.markdown("***Le cadmium (Cd)*** est un m√©tal lourd qui se retrouve dans les diff√©rents compartiments de l‚Äôenvironnement (sols, eau, air) du fait de sa pr√©sence √† l‚Äô√©tat naturel dans la cro√ªte terrestre et des activit√©s industrielles et agricoles.  La source principale d‚Äôexposition au cadmium varie selon le type de population : l‚Äôalimentation pour la population g√©n√©rale, la fum√©e de cigarette et l‚Äôair ambiant pour les travailleurs expos√©s en milieu industriel.Chez l‚Äôhomme, une exposition prolong√©e au cadmium par voie orale induit une atteinte r√©nale. Une fragilit√© osseuse, des troubles de la reproduction ont √©galement √©t√© r√©pertori√©s, ainsi qu‚Äôun risque accru de cancer ayant donn√© lieu √† un classement comme ¬´ canc√©rog√®ne pour l‚Äôhomme ¬ª (groupe 1) par le Centre International de Recherche sur le Cancer (CIRC) en 1993.")
        st.markdown("***L‚Äôaluminium (Al)*** est l‚Äô√©l√©ment m√©tallique le plus abondant de la cro√ªte terrestre. Du fait de ses propri√©t√©s physico-chimiques (basse densit√©, mall√©abilit√©, r√©sistance √† la corrosion, etc.), il est utilis√© dans de nombreux domaines industriels (agro-alimentaire, pharmaceutique, b√¢timent, etc.) et pour le traitement des eaux d‚Äôalimentation. Il est pr√©sent dans les aliments et l‚Äôeau sous diff√©rentes formes chimiques qui d√©terminent sa toxicit√©. Les effets toxiques de l‚Äôaluminium portent essentiellement sur le syst√®me nerveux central (enc√©phalopathies, troubles psychomoteurs) et sur le tissu osseux. Chez l‚Äôhomme, ces effets sont observ√©s chez des sujets expos√©s par d‚Äôautres voies que l‚Äôalimentation, conduisant √† l‚Äôaccumulation de fortes quantit√©s d‚Äôaluminium : patients insuffisants r√©naux dialys√©s, alimentation parent√©rale, personnes professionnellement expos√©es. ")
        st.markdown("***L‚Äôantimoine (Sb)*** est un m√©tallo√Øde tr√®s peu abondant dans la cro√ªte terrestre. Il est utilis√© dans les alliages m√©talliques pour en accro√Ætre la duret√©, dans la fabrication de semi-conducteurs, dans les plastiques et les feux d‚Äôartifices. Le trioxyde d‚Äôantimoine est employ√© comme ignifugeant pour les textiles et les mati√®res plastiques, comme opacifiant pour les verres, les c√©ramiques et les √©maux, comme pigment pour les peintures et comme catalyseur chimique. Le trioxyde d‚Äôantimoine a √©t√© class√© consid√©r√© comme ¬´ peut-√™tre canc√©rog√®ne pour l‚Äôhomme ¬ª (groupe 2B) par le Centre International de Recherche sur le Cancer (CIRC) en 1989. Les sels solubles d‚Äôantimoine provoquent, apr√®s ingestion, des effets irritants au niveau gastro-intestinal se traduisant par des vomissements, des crampes abdominales et des diarrh√©es. Une toxicit√© cardiaque ou oculaire est aussi rapport√©e √† fortes doses. ")
        st.markdown("***Le baryum (Ba)*** est un m√©tal pr√©sent dans de nombreux minerais. Son utilisation concerne de nombreux domaines (pesticides, textiles, pigments, traitement d‚Äôeaux, m√©dical, etc.).Les sels solubles de baryum sont bien absorb√©s et se d√©posent essentiellement au niveau du tissu osseux. Il n‚Äôa pas √©t√© d√©montr√© d‚Äôeffet canc√©rog√®ne ni mutag√®ne (alt√©ration de la structure de l'ADN). Les travailleurs expos√©s r√©guli√®rement par inhalation au baryum peuvent pr√©senter des manifestations pulmonaires b√©nignes sans troubles fonctionnels associ√©s. ")
        st.markdown("***Le gallium (Ga)*** est un m√©tal provenant essentiellement de l‚Äôextraction de l‚Äôaluminium et du zinc. Essentiellement sous forme de sels, il est utilis√© en petite quantit√© pour la fabrication de semi-conducteurs, dans l‚Äôindustrie √©lectrique et √©lectronique ; c‚Äôest un substitut du mercure pour les lampes √† arc et les thermom√®tres pour hautes temp√©ratures. Plusieurs utilisations m√©dicales sont d√©crites : traceur radioactif, alliage dentaires, traitement des hypercalc√©mies tumorales. Dans le contexte de l‚Äôexposition professionnelle, le gallium et ses compos√©s p√©n√®trent par voie respiratoire, et tr√®s peu par voie digestive. La r√©tention de gallium au niveau pulmonaire est certaine chez l‚Äôanimal. L‚Äôabsorption √† partir du tube digestif semble faible. Il est transport√© par le sang, et se distribue dans le foie, la rate, les tissus osseux et la moelle osseuse. La toxicit√© est bas√©e essentiellement sur des √©tudes animales et varie selon les esp√®ces et les compos√©s du gallium. Les organes cibles sont le poumon, le syst√®me h√©matopo√Ø√©tique (ormation des globules sanguins), le syst√®me immunitaire, le rein et l‚Äôappareil reproducteur male.  L‚Äôars√©niure de gallium est class√© par le Centre International de Recherche sur le Cancer parmi les ¬´ canc√©rog√®nes pour l‚Äôhomme ¬ª (groupe 1) en s‚Äôappuyant surtout sur des donn√©es exp√©rimentales animales et sans en avoir d√©montr√© le m√©canisme d‚Äôaction.")
        st.markdown("***Le germanium (Ge)*** est un m√©tallo√Øde pr√©sent naturellement dans la cro√ªte terrestre. Il peut exister sous forme organique ou inorganique. G√©n√©ralement obtenu √† partir du raffinage du cuivre, du zinc et du plomb, il est utilis√© principalement dans le secteur de l‚Äô√©lectronique (diodes, transistors, etc.) et du verre (√©l√©ment optique) du fait de ses propri√©t√©s proches de celles du silicium. Dans certains pays, il est √©galement commercialis√© sous forme organique en tant que compl√©ment alimentaire. L‚Äôabsorption du germanium au niveau intestinal est rapide et compl√®te. Son √©limination est principalement urinaire. Il n‚Äôest ni mutag√®ne (alt√©ration de la structure de l'ADN), ni canc√©rig√®ne sous ses formes ioniques ou dioxyde de germanium. Plusieurs cas rapport√©s de patients expos√©s de mani√®re r√©p√©t√©e √† de fortes doses de germanium (compl√©ment alimentaire) indiquent notamment des perturbations au niveau r√©nal.")
        st.markdown("***Le tellure (Te)*** est un metallo√Øde issu principalement des r√©sidus d‚Äôaffinage du cuivre. Il est utilis√© principalement en m√©tallurgie (alliage), dans l‚Äôindustrie chimique (caoutchouc, plastique) et dans l‚Äô√©lectronique. Le tellure est absorb√© par ingestion et √©limin√© en partie dans les urines. Il n‚Äôest ni mutag√®ne (alt√©ration de la structure de l'ADN), ni canc√©rog√®ne. Des effets t√©ratog√®nes (susceptible de provoquer des malformations cong√©nitales chez les enfants expos√©s in utero) ont √©t√© observ√©s chez des rats expos√©s oralement √† des doses √©lev√©es de tellure dans la nourriture. En milieu professionnel, l‚Äôexposition par inhalation au tellure peut engendrer des sympt√¥mes sans gravit√© particuli√®re, caract√©ris√©s essentiellement par une haleine alliac√©e.")
        st.markdown("***Le vanadium (V)*** est un m√©tal que l‚Äôon retrouve √† l‚Äô√©tat naturel. Il est principalement utilis√© en m√©tallurgie pour augmenter la r√©sistance des aciers, et dans d‚Äôautres industries pour ses propri√©t√©s catalytiques, colorantes ou anticorrosives. Le r√¥le fonctionnel du vanadium n‚Äôa pas √©t√© clairement caract√©ris√© chez l‚Äôanimal ou chez l‚Äôhomme. Selon la dose, le vanadium pourrait avoir des effets sur les m√©tabolismes lipidique et glucidique et dans la fonction thyro√Ødienne. Le vanadium est peu absorb√© par voie orale (<1%). Chez l‚Äôanimal, les √©tudes exp√©rimentales indiquent que les effets les plus sensibles observ√©s suite √† l‚Äôingestion de sels de vanadium sont des perturbations au niveau sanguin (pression art√©rielle et taux de globules rouges), des syst√®mes nerveux et r√©nal et du d√©veloppement. Des √©tudes exp√©rimentales sur un compos√© de vanadium (le pentoxyde de vanadium) r√©v√®lent d‚Äôautres effets toxiques (atteinte de la rate, des reins, des poumons et cancers) mais la pr√©sence de cette forme dans les aliments n‚Äôa jamais √©t√© d√©montr√©e. ")
        st.markdown("***Le nickel (Ni)*** est un m√©tal naturellement pr√©sent dans la cro√ªte terrestre dont les propri√©t√©s de mall√©abilit√©, de magn√©tisme, de conduction de la chaleur et de l‚Äô√©lectricit√© conduisent √† le retrouver dans de tr√®s nombreuses applications industrielles principalement sous forme d‚Äôalliages (aciers inoxydables) et de catalyseurs pour les constructions automobile, navale et a√©ronautique, et les industries √©lectriques. Le nickel se retrouve sous une grande vari√©t√© de formes chimiques inorganiques (m√©tal, oxydes, sels) ou organiques. L‚Äôhomme y est expos√© par inhalation (exposition professionnelle), par la consommation d‚Äôeau et d‚Äôaliments et par contact cutan√©. Dans ce dernier cas, il est allergisant et peut provoquer une dermatite de contact. Les effets canc√©rog√®nes des compos√©s du nickel observ√©s apr√®s une exposition par inhalation ont conduit √† une classification par le Centre International de Recherche sur le Cancer (CIRC) parmi les ¬´ canc√©rog√®nes pour l‚Äôhomme ¬ª (groupe 1). Toutefois, aucune √©tude par voie orale n‚Äôa montr√© d‚Äôeffet canc√©rog√®ne. Aucun compos√© du nickel n‚Äôest actuellement class√© comme mutag√®ne (alt√©ration dela structure de l'ADN).")
        st.markdown("***Le cobalt (Co)*** est un m√©tal naturellement pr√©sent dans la cro√ªte terrestre. Le cobalt et ses compos√©s min√©raux ont de nombreuses applications dans l‚Äôindustrie chimique et p√©troli√®re comme catalyseur, pour la fabrication d‚Äôalliages, comme pigment pour le verre et les c√©ramiques, comme agent s√©chant des peintures, etc. Il est √©galement utilis√© en tant qu‚Äôadditif dans les aliments pour animaux pour les esp√®ces capables de synth√©tiser la vitamine B12. On trouve le cobalt dans les produits animaux (sous forme de cobalamine) et dans les v√©g√©taux (sous forme inorganique). Chez l'homme, le cobalt absorb√© est majoritairement retrouv√© dans le foie et les reins. Chez l‚Äôanimal, les effets toxiques rapport√©s avec des sels de cobalt comprennent une polycyth√©mie (augmentation de la masse √©rythrocytaire totale), des modifications cardiaques, des alt√©rations fonctionnelles et morphologiques de la thyro√Øde, une d√©g√©n√©rescence et une atrophie testiculaires, une r√©duction de la croissance et de la survie de la descendance. Chez l‚Äôhomme, des cardiomyopathies ont √©t√© rapport√©es dans les ann√©es 60 chez des forts buveurs de bi√®re, auxquelles avait √©t√© ajout√© du cobalt en tant qu‚Äôagent stabilisateur de mousse. Les compos√©s du cobalt (II) ont √©t√© class√©s par le Centre International de Recherche surle Cancer (CIRC) comme ¬´ peut-√™tre canc√©rog√®nes pour l‚Äôhomme ¬ª (groupe 2B). Des √©tudes ont montr√© que les sels de cobalt sont capables d‚Äôinduire des alt√©rations g√©notoxiques tels que des dommages √† l‚ÄôADN, des mutations g√©niques, la formation de micronoyaux, des aberrations chromosomiques chez l‚Äôanimal par voie orale ou parent√©rale.")
        st.markdown("***Le chrome (Cr)*** est un m√©tal abondant dans la cro√ªte terrestre, est utilis√© dans des alliages m√©talliques tels que l‚Äôacier inoxydable, en pigments, pour le tannage des peaux, etc. L‚Äôhomme y est expos√© par inhalation et par la consommation d‚Äôeau et d‚Äôaliments. Chez l‚Äôhomme, la d√©ficience en chrome a √©t√© observ√©e chez des patients recevant une nutrition parent√©rale totale sur le long terme. Les sympt√¥mes sont une alt√©ration de l‚Äôutilisation et de la tol√©rance au glucose, une alt√©ration du m√©tabolisme lipidique, une alt√©ration du m√©tabolisme de l‚Äôazote, une perte de poids. En cas de carences profondes, des effets neurologiques peuvent √™tre observ√©s. Chez l‚Äôenfant, aucune carence en chrome n‚Äôa √©t√© d√©crite en dehors d‚Äôune malnutrition prot√©ino-√©nerg√©tique s√©v√®re. Le chrome pr√©sente une toxicit√© nettement diff√©rente en fonction de sa valence. Diff√©rents compos√©s du chrome sont g√©notoxiques et sont class√©s par le Centre International de Recherche sur le Cancer comme ¬´ canc√©rog√®nes pour l‚Äôhomme ¬ª (groupe 1), du fait d‚Äôun exc√®s de risque de cancer du poumon chez les professionnels expos√©s par inhalation. Par voie orale, certaines donn√©es sugg√®rent une augmentation de l‚Äôincidence de cancer de l‚Äôestomac chez l‚ÄôHomme expos√© par l‚Äôeau de boisson. ")

    
    #if substances == "Phytoestrog√®nes":

    
    #if substances == "Mycotoxines":

    
    #if substances == "Additifs":


    #if substances == "Pesticides":

    

       

#######


######## Contamination
if selected == "Contamination":
    st.subheader("Quantification des substances : limites analytiques et hypoth√®ses")
    st.markdown("La quantification d‚Äôune substance chimique dans un aliment peut parfois rencontrer des difficult√©s en raison des limites analytiques. Il s‚Äôagit notamment des limites de d√©tection de la substance (LD) dans l‚Äôaliment par l‚Äôappareil de mesure et/ou de quantification (LQ).")
    st.markdown("""Une substance est dite ¬´ d√©tect√©e ¬ª d√®s lors que l‚Äôanalyse a mis en √©vidence sa pr√©sence dans un aliment. Dans le cas contraire, la substance sera inf√©rieure √† la limite de d√©tection (<LD).

Une substance est dite ¬´ quantifi√©e ¬ª lorsqu‚Äôelle a √©t√© d√©tect√©e et que sa teneur est suffisamment importante pour √™tre quantifi√©e. Si la teneur est tr√®s basse et que l‚Äôappareil analytique n‚Äôest pas en mesure de la quantifier, elle est seulement dite ¬´ d√©tect√©e ¬ª mais inf√©rieure √† la limite de quantification (<LQ).

Pour pouvoir exploiter ces donn√©es non chiffr√©es, diff√©rentes hypoth√®ses peuvent √™tre utilis√©es pour avoir une estimation du niveau de contamination de ces substances en tenant compte de ces limites analytiques. Deux cas de figure ont √©t√© retenus conform√©ment aux lignes directrices (GEMS-Food Euro, 1995) : 

***1.    le pourcentage de r√©sultats <LD et <LQ est inf√©rieur √† 60%, les donn√©es sont remplac√©es par une hypoth√®se moyenne dite ¬´ middle bound (MB) ¬ª :***
* Toutes les valeurs non d√©tect√©es (<LD) sont fix√©es √† ¬Ω LD.
* Toutes les valeurs non quantifi√©es (<LQ) sont fix√©es √† ¬Ω LQ.

***2.    le pourcentage de r√©sultats <LD et <LQ est sup√©rieur √† 60%, les donn√©es sont remplac√©es par deux hypoth√®ses :***
* Hypoth√®se basse dite ¬´ lower bound (LB) ¬ª o√π toutes les valeurs non d√©tect√©es (<LD) sont fix√©es √† z√©ro et toutes les valeurs non quantifi√©es (<LQ) sont fix√©es √† la LD ou √† 0 si la LD n‚Äôest pas renseign√©e.
* Hypoth√®se haute dite ¬´ upper bound (UB) ¬ª o√π toutes les valeurs non d√©tect√©es (<LD) sont fix√©es √† la LD et toutes les valeurs non quantifi√©es (<LQ) sont fix√©es √† la LQ.\n
\n""")

    # sch√©ma des diff√©rentes hypoth√®ses
    col1, col2, col3, col4, col5, col6 = st.columns(6)
    
    with col2:
        width = 700
        st.image("media/Hypotheses_Analyses.png", width=width)
    
    
    col1, col2, col3 = st.columns(3)
    
    with col3:
        substances = st.selectbox(
        "Choix de la famille de substances",
        ('Contaminants inorganiques','Acrylamide', 'HAP', 'Dioxines, PCB','Perfluor√©s','Brom√©s','Additifs','Pesticides'))
        
    if substances == "Acrylamide":
        modalites = ['Acrylamide']

        # Cr√©ation du nouveau dataframe avec les modalit√©s sp√©cifi√©es
        df_accry = df_accry[df_accry['Substance'].isin(modalites)]

        tab1, tab2, tab3 = st.tabs(["Hypoth√®se Basse", "Hypoth√®se Moyenne","Hypoth√®se Haute"])
        df_accry_ali = df_accry.groupby(['Aliment','Substance' ]).agg({'LB': 'mean', 'UB': 'mean', 'MB': 'mean', "Groupe":lambda x: x.mode().iat[0]}).reset_index()
        df_accry_groupe = df_accry.groupby(['Groupe', 'Substance']).agg({'LB': 'mean', 'UB': 'mean', 'MB': 'mean'}).reset_index()

        choix_substances = df_accry['Substance'].unique()
        choix_groupe = df_accry['Groupe'].unique()

        with tab1:

            col1, col2, col3 = st.columns(3)
    
            with col3:
                substances_LB_accry = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_LB_accry")
                df_filtered_substance = df_accry_groupe[df_accry_groupe['Substance'] == substances_LB_accry]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['LB'])

            fig = px.bar(df_filtered_substance, x='LB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True
                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
            with col3:
                #Groupe
                choix_groupe = df_accry_ali['Groupe'].unique().astype(str).tolist()

                groupe_LB_accry= st.selectbox("Choix du groupe d'aliments", choix_groupe, key="groupe_LB_accry")
                df_filtered_groupe = df_accry_ali.loc[(df_accry_ali['Groupe'] == groupe_LB_accry) & (df_accry_ali['Substance'] == substances_LB_accry)]
                df_filtered_groupe = df_filtered_groupe.dropna(axis = 0, how = 'all', subset = ['LB'])
    
            fig = px.bar(df_filtered_groupe, x='LB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

        with tab2:

            col1, col2, col3 = st.columns(3)
    
            with col3:
                substances_MB_accry = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_MB_accry")
                df_filtered_substance = df_accry_groupe[df_accry_groupe['Substance'] == substances_MB_accry]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['MB'])
                

            fig = px.bar(df_filtered_substance, x='MB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True
                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
    
            with col3:
                #Groupe
                choix_groupe = df_accry_ali['Groupe'].unique().astype(str).tolist()

                groupe_MB_accry = st.selectbox("Choix du groupe d'aliments", choix_groupe, key="groupe_MB_accry")
                df_filtered_groupe = df_accry_ali.loc[(df_accry_ali['Groupe'] == groupe_MB_accry) & (df_accry_ali['Substance'] == substances_MB_accry)]
                df_filtered_groupe = df_filtered_groupe.dropna(axis = 0, how = 'all', subset = ['MB'])
    

            fig = px.bar(df_filtered_groupe, x='MB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')


    
        with tab3:


            col1, col2, col3 = st.columns(3)
    
            with col3:
                substances_UB_accry = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_UB_accry")
                df_filtered_substance = df_accry_groupe[df_accry_groupe['Substance'] == substances_UB_accry]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['UB'])

            fig = px.bar(df_filtered_substance, x='UB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True

                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
    
            with col3:
                groupe_UB_accry = st.selectbox("Choix du groupe d'aliments", choix_groupe, key="groupe_UB_accry")
                df_filtered_groupe = df_accry_ali.loc[(df_accry_ali['Groupe'] == groupe_UB_accry) & (df_accry_ali['Substance'] == substances_UB_accry)]
                df_filtered_groupe = df_filtered_groupe.dropna(axis = 0, how = 'all', subset = ['UB'])
    

            fig = px.bar(df_filtered_groupe, x='UB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

    if substances == "HAP":
        modalites = ['PHE', 'AN', 'FA', 'PY', 'BaA', 'CPP', 'CHR', 'MCH', 'BbF', 'BjF',
       'BkF', 'BaP', 'IP', 'DBahA', 'BghiP', 'DbalP', 'DbaeP', 'DbaiP',
       'DbahP', 'BcFL']

       # Cr√©ation du nouveau dataframe avec les modalit√©s sp√©cifi√©es
        df_hap = df_hap[df_hap['Substance'].isin(modalites)]

        tab1, tab2, tab3 = st.tabs(["Hypoth√®se Basse", "Hypoth√®se Moyenne","Hypoth√®se Haute"])
        df_hap_ali = df_hap.groupby(['Aliment','Substance' ]).agg({'LB': 'mean', 'UB': 'mean', 'MB': 'mean', "Groupe":lambda x: x.mode().iat[0]}).reset_index()
        df_hap_groupe = df_hap.groupby(['Groupe', 'Substance']).agg({'LB': 'mean', 'UB': 'mean', 'MB': 'mean'}).reset_index()

        choix_substances = df_hap['Substance'].unique()
        choix_groupe = df_hap['Groupe'].unique()

        with tab1:

            col1, col2, col3 = st.columns(3)
    
            with col3:
                substances_LB_hap = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_LB_hap")
                df_filtered_substance = df_hap_groupe[df_hap_groupe['Substance'] == substances_LB_hap]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['LB'])

            fig = px.bar(df_filtered_substance, x='LB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True
                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
            with col3:
                #Groupe
                choix_groupe = df_hap_ali['Groupe'].unique().astype(str).tolist()
                # D√©finir la valeur par d√©faut
                valeur_par_defaut = "substances_UB_hap"
                # Trouver l'index correspondant √† la valeur par d√©faut
                index_valeur_par_defaut = choix_groupe.index(valeur_par_defaut)
                groupe_LB_hap= st.selectbox("Choix du groupe d'aliments", choix_groupe, index=index_valeur_par_defaut, key="groupe_LB_hap")

                df_filtered_groupe = df_hap_ali.loc[(df_hap_ali['Groupe'] == groupe_LB_hap) & (df_hap_ali['Substance'] == substances_LB_hap)]
                df_filtered_groupe = df_filtered_groupe.dropna(axis = 0, how = 'all', subset = ['LB'])
    
            fig = px.bar(df_filtered_groupe, x='LB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

        with tab2:

            col1, col2, col3 = st.columns(3)
    
            with col3:
                substances_MB_hap = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_MB_hap")
                df_filtered_substance = df_hap_groupe[df_hap_groupe['Substance'] == substances_MB_hap]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['MB'])
                

            fig = px.bar(df_filtered_substance, x='MB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True
                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
    
            with col3:
                #Groupe
                choix_groupe = df_hap_ali['Groupe'].unique().astype(str).tolist()

                groupe_MB_hap = st.selectbox("Choix du groupe d'aliments", choix_groupe, key="groupe_MB_hap")
                df_filtered_groupe = df_hap_ali.loc[(df_hap_ali['Groupe'] == groupe_MB_hap) & (df_hap_ali['Substance'] == substances_MB_hap)]
                df_filtered_groupe = df_filtered_groupe.dropna(axis = 0, how = 'all', subset = ['MB'])
    

            fig = px.bar(df_filtered_groupe, x='MB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')


    
        with tab3:


            col1, col2, col3 = st.columns(3)
    
            with col3:
                substances_UB_hap = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_UB_hap")
                df_filtered_substance = df_hap_groupe[df_hap_groupe['Substance'] == substances_UB_hap]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['UB'])

            fig = px.bar(df_filtered_substance, x='UB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True

                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
    
            with col3:
                groupe_UB_hap = st.selectbox("Choix du groupe d'aliments", choix_groupe, key="groupe_UB_hap")
                df_filtered_groupe = df_hap_ali.loc[(df_hap_ali['Groupe'] == groupe_UB_hap) & (df_hap_ali['Substance'] == substances_UB_hap)]
                df_filtered_groupe = df_filtered_groupe.dropna(axis = 0, how = 'all', subset = ['UB'])
    

            fig = px.bar(df_filtered_groupe, x='UB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

       

    
    if substances == "Dioxines, PCB":
        modalites = ['TCDD_2378', 'PCDD_12378', 'HCDD_123478', 'HCDD_123678',
       'HCDD_123789', 'HCDD_1234678', 'OCDD', 'TCDF_2378', 'PCDF_12378',
       'PCDF_23478', 'HCDF_123478', 'HCDF_123678', 'HCDF_234678',
       'HCDF_123789', 'HCDF_1234678', 'HCDF_1234789', 'OCDF', 'PCB_77',
       'PCB_81', 'PCB_126', 'PCB_169', 'PCB_105', 'PCB_114', 'PCB_118',
       'PCB_123', 'PCB_156', 'PCB_157', 'PCB_167', 'PCB_189', 'PCB_28']

       # Cr√©ation du nouveau dataframe avec les modalit√©s sp√©cifi√©es
        df_dio = df_dio[df_dio['Substance'].isin(modalites)]

        tab1, tab2, tab3 = st.tabs(["Hypoth√®se Basse", "Hypoth√®se Moyenne","Hypoth√®se Haute"])
        df_dio_ali = df_dio.groupby(['Aliment','Substance' ]).agg({'LB': 'mean', 'UB': 'mean', 'MB': 'mean', "Groupe":lambda x: x.mode().iat[0]}).reset_index()
        df_dio_groupe = df_dio.groupby(['Groupe', 'Substance']).agg({'LB': 'mean', 'UB': 'mean', 'MB': 'mean'}).reset_index()

        choix_substances = df_dio['Substance'].unique()
        choix_groupe = df_dio['Groupe'].unique()

        with tab1:

            col1, col2, col3 = st.columns(3)
    
            with col3:
                substances_LB_dio = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_LB_dio")
                df_filtered_substance = df_dio_groupe[df_dio_groupe['Substance'] == substances_LB_dio]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['LB'])

            fig = px.bar(df_filtered_substance, x='LB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True
                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
            with col3:
                #Groupe
                choix_groupe = df_dio_ali['Groupe'].unique().astype(str).tolist()

                groupe_LB_dio= st.selectbox("Choix du groupe d'aliments", choix_groupe, key="groupe_LB_dio")
                df_filtered_groupe = df_dio_ali.loc[(df_dio_ali['Groupe'] == groupe_LB_dio) & (df_dio_ali['Substance'] == substances_LB_dio)]
                df_filtered_groupe = df_filtered_groupe.dropna(axis = 0, how = 'all', subset = ['LB'])
    
            fig = px.bar(df_filtered_groupe, x='LB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

        with tab2:

            col1, col2, col3 = st.columns(3)
    
            with col3:
                substances_MB_dio = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_MB_dio")
                df_filtered_substance = df_dio_groupe[df_dio_groupe['Substance'] == substances_MB_dio]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['MB'])
                

            fig = px.bar(df_filtered_substance, x='MB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True
                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
    
            with col3:
                #Groupe
                choix_groupe = df_dio_ali['Groupe'].unique().astype(str).tolist()

                groupe_MB_dio = st.selectbox("Choix du groupe d'aliments", choix_groupe, key="groupe_MB_dio")
                df_filtered_groupe = df_dio_ali.loc[(df_dio_ali['Groupe'] == groupe_MB_dio) & (df_dio_ali['Substance'] == substances_MB_dio)]
                df_filtered_groupe = df_filtered_groupe.dropna(axis = 0, how = 'all', subset = ['MB'])
    

            fig = px.bar(df_filtered_groupe, x='MB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')


    
        with tab3:


            col1, col2, col3 = st.columns(3)
    
            with col3:
                substances_UB_dio = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_UB_dio")
                df_filtered_substance = df_dio_groupe[df_dio_groupe['Substance'] == substances_UB_dio]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['UB'])

            fig = px.bar(df_filtered_substance, x='UB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True

                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
    
            with col3:
                groupe_UB_dio = st.selectbox("Choix du groupe d'aliments", choix_groupe, key="groupe_UB_dio")
                df_filtered_groupe = df_dio_ali.loc[(df_dio_ali['Groupe'] == groupe_UB_dio) & (df_dio_ali['Substance'] == substances_UB_dio)]
                df_filtered_groupe = df_filtered_groupe.dropna(axis = 0, how = 'all', subset = ['UB'])
    

            fig = px.bar(df_filtered_groupe, x='UB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

       

    if substances == "Perfluor√©s":
        modalites = ['PFOS', 'PFBS', 'PFHxS', 'PFHpS', 'PFDS', 'PFOA', 'PFBA', 'PFPA',
       'PFHxA', 'PFHpA', 'PFNA', 'PFDA', 'PFUnA', 'PFDoA', 'PFTrDA',
       'PFTeDA']

       # Cr√©ation du nouveau dataframe avec les modalit√©s sp√©cifi√©es
        df_per = df_per[df_per['Substance'].isin(modalites)]

        tab1, tab2, tab3 = st.tabs(["Hypoth√®se Basse", "Hypoth√®se Moyenne","Hypoth√®se Haute"])
        df_per_ali = df_per.groupby(['Aliment','Substance' ]).agg({'LB': 'mean', 'UB': 'mean', 'MB': 'mean', "Groupe":lambda x: x.mode().iat[0]}).reset_index()
        df_per_groupe = df_per.groupby(['Groupe', 'Substance']).agg({'LB': 'mean', 'UB': 'mean', 'MB': 'mean'}).reset_index()

        choix_substances = df_per['Substance'].unique()
        choix_groupe = df_per['Groupe'].unique()

        with tab1:

            col1, col2, col3 = st.columns(3)
    
            with col3:
                choix_substances = ['PFOS', 'PFBS', 'PFHxS', 'PFOA', 'PFHxA', 'PFHpA', 'PFNA', 'PFDA','PFUnA', 'PFDoA', 'PFTrDA', 'PFTeDA']
                substances_LB_per = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_LB_per")
                df_filtered_substance = df_per_groupe[df_per_groupe['Substance'] == substances_LB_per]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['LB'])

            fig = px.bar(df_filtered_substance, x='LB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True
                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
            with col3:
                #Groupe
                choix_groupe = df_per_ali['Groupe'].unique().astype(str).tolist()
                # D√©finir la valeur par d√©faut
                valeur_par_defaut = "Crustac√©s et mollusques"
                # Trouver l'index correspondant √† la valeur par d√©faut
                index_valeur_par_defaut = choix_groupe.index(valeur_par_defaut)
                groupe_LB_per= st.selectbox("Choix du groupe d'aliments", choix_groupe, index=index_valeur_par_defaut, key="groupe_LB_per")
                df_filtered_groupe = df_per_ali.loc[(df_per_ali['Groupe'] == groupe_LB_per) & (df_per_ali['Substance'] == substances_LB_per)]
                df_filtered_groupe = df_filtered_groupe.dropna(axis = 0, how = 'all', subset = ['LB'])
    
            fig = px.bar(df_filtered_groupe, x='LB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

        with tab2:

            col1, col2, col3 = st.columns(3)
    
            with col3:
                substances_MB_per = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_MB_per")
                df_filtered_substance = df_per_groupe[df_per_groupe['Substance'] == substances_MB_per]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['MB'])
                

            fig = px.bar(df_filtered_substance, x='MB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True
                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
    
            with col3:
                #Groupe
                choix_groupe = df_per_ali['Groupe'].unique().astype(str).tolist()

                groupe_MB_per = st.selectbox("Choix du groupe d'aliments", choix_groupe, key="groupe_MB_per")
                df_filtered_groupe = df_per_ali.loc[(df_per_ali['Groupe'] == groupe_MB_per) & (df_per_ali['Substance'] == substances_MB_per)]
                df_filtered_groupe = df_filtered_groupe.dropna(axis = 0, how = 'all', subset = ['MB'])
    

            fig = px.bar(df_filtered_groupe, x='MB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')


    
        with tab3:


            col1, col2, col3 = st.columns(3)
    
            with col3:
                substances_UB_per = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_UB_per")
                df_filtered_substance = df_per_groupe[df_per_groupe['Substance'] == substances_UB_per]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['UB'])

            fig = px.bar(df_filtered_substance, x='UB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True

                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
    
            with col3:
                groupe_UB_per = st.selectbox("Choix du groupe d'aliments", choix_groupe, key="groupe_UB_per")
                df_filtered_groupe = df_per_ali.loc[(df_per_ali['Groupe'] == groupe_UB_per) & (df_per_ali['Substance'] == substances_UB_per)]
                df_filtered_groupe = df_filtered_groupe.dropna(axis = 0, how = 'all', subset = ['UB'])
    

            fig = px.bar(df_filtered_groupe, x='UB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

        

    
    if substances == "Brom√©s":
        modalites = ['HBCD alpha', 'HBCD beta', 'HBCD gamma', 'BB52', 'BB101', 'BB153',
       'BDE28', 'BDE47', 'BDE99', 'BDE100', 'BDE153', 'BDE154', 'BDE183',
       'BDE209']

       # Cr√©ation du nouveau dataframe avec les modalit√©s sp√©cifi√©es
        df_bro = df_bro[df_bro['Substance'].isin(modalites)]

        tab1, tab2, tab3 = st.tabs(["Hypoth√®se Basse", "Hypoth√®se Moyenne","Hypoth√®se Haute"])
        df_bro_ali = df_bro.groupby(['Aliment','Substance' ]).agg({'LB': 'mean', 'UB': 'mean', 'MB': 'mean', "Groupe":lambda x: x.mode().iat[0]}).reset_index()
        df_bro_groupe = df_bro.groupby(['Groupe', 'Substance']).agg({'LB': 'mean', 'UB': 'mean', 'MB': 'mean'}).reset_index()

        choix_substances = df_bro['Substance'].unique()
        choix_groupe = df_bro['Groupe'].unique()

        with tab1:

            col1, col2, col3 = st.columns(3)
    
            with col3:
                substances_LB_bro = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_LB_bro")
                df_filtered_substance = df_bro_groupe[df_bro_groupe['Substance'] == substances_LB_bro]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['LB'])

            fig = px.bar(df_filtered_substance, x='LB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True
                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
            with col3:
                #Groupe
                choix_groupe = df_bro_ali['Groupe'].unique().astype(str).tolist()
                # D√©finir la valeur par d√©faut
                valeur_par_defaut = "Poissons"
                # Trouver l'index correspondant √† la valeur par d√©faut
                index_valeur_par_defaut = choix_groupe.index(valeur_par_defaut)
                groupe_LB_bro= st.selectbox("Choix du groupe d'aliments", choix_groupe, index=index_valeur_par_defaut, key="groupe_LB_bro")
                df_filtered_groupe = df_bro_ali.loc[(df_bro_ali['Groupe'] == groupe_LB_bro) & (df_bro_ali['Substance'] == substances_LB_bro)]
                df_filtered_groupe = df_filtered_groupe.dropna(axis = 0, how = 'all', subset = ['LB'])
    
            fig = px.bar(df_filtered_groupe, x='LB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

        with tab2:

            col1, col2, col3 = st.columns(3)
    
            with col3:
                substances_MB_bro = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_MB_bro")
                df_filtered_substance = df_bro_groupe[df_bro_groupe['Substance'] == substances_MB_bro]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['MB'])
                

            fig = px.bar(df_filtered_substance, x='MB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True
                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
    
            with col3:
                #Groupe
                choix_groupe = df_bro_ali['Groupe'].unique().astype(str).tolist()

                groupe_MB_bro = st.selectbox("Choix du groupe d'aliments", choix_groupe, key="groupe_MB_bro")
                df_filtered_groupe = df_bro_ali.loc[(df_bro_ali['Groupe'] == groupe_MB_bro) & (df_bro_ali['Substance'] == substances_MB_bro)]
                df_filtered_groupe = df_filtered_groupe.dropna(axis = 0, how = 'all', subset = ['MB'])
    

            fig = px.bar(df_filtered_groupe, x='MB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')


    
        with tab3:


            col1, col2, col3 = st.columns(3)
    
            with col3:
                substances_UB_bro = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_UB_bro")
                df_filtered_substance = df_bro_groupe[df_bro_groupe['Substance'] == substances_UB_bro]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['UB'])

            fig = px.bar(df_filtered_substance, x='UB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True

                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
    
            with col3:
                groupe_UB_bro = st.selectbox("Choix du groupe d'aliments", choix_groupe, key="groupe_UB_bro")
                df_filtered_groupe = df_bro_ali.loc[(df_bro_ali['Groupe'] == groupe_UB_bro) & (df_bro_ali['Substance'] == substances_UB_bro)]
                df_filtered_groupe = df_filtered_groupe.dropna(axis = 0, how = 'all', subset = ['UB'])
    

            fig = px.bar(df_filtered_groupe, x='UB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

        

    if substances == "Contaminants inorganiques":
        modalites = ['Arsenic', 'Plomb', 'Cadmium', 'Aluminium', 'Mercure', 'Antimoine', 'Argent', 'Baryum',
             'Etain', 'Gallium', 'Germanium', 'Strontium', 'Tellure', 'Vanadium', 'Nickel', 'Cobalt', 'Chrome']

        # Cr√©ation du nouveau dataframe avec les modalit√©s sp√©cifi√©es
        df_ino = df_ino[df_ino['Substance'].isin(modalites)]

        tab1, tab2, tab3 = st.tabs(["Hypoth√®se Basse", "Hypoth√®se Moyenne","Hypoth√®se Haute"])
        df_ino_ali = df_ino.groupby(['Aliment','Substance' ]).agg({'LB': 'mean', 'UB': 'mean', 'MB': 'mean', "Groupe":lambda x: x.mode().iat[0]}).reset_index()
        df_ino_groupe = df_ino.groupby(['Groupe', 'Substance']).agg({'LB': 'mean', 'UB': 'mean', 'MB': 'mean'}).reset_index()

        choix_substances = df_ino['Substance'].unique()
        choix_groupe = df_ino['Groupe'].unique()

        with tab1:
            st.markdown("")
            image = Image.open('Heatmap/Heatmap_ino_LB.png')
            st.image(image, use_column_width=True)

            col1, col2, col3 = st.columns(3)
    
            with col3:
                substances_LB_ino = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_LB_ino")
                df_filtered_substance = df_ino_groupe[df_ino_groupe['Substance'] == substances_LB_ino]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['LB'])

            fig = px.bar(df_filtered_substance, x='LB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True
                  )

            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
            with col3:
                #Groupe
                choix_groupe = df_ino_ali['Groupe'].unique().astype(str).tolist()
                # D√©finir la valeur par d√©faut
                valeur_par_defaut = "Crustac√©s et mollusques"
                # Trouver l'index correspondant √† la valeur par d√©faut
                index_valeur_par_defaut = choix_groupe.index(valeur_par_defaut)
                groupe_LB_ino= st.selectbox("Choix du groupe d'aliments", choix_groupe, index=index_valeur_par_defaut, key="groupe_LB_ino")
                df_filtered_groupe = df_ino_ali.loc[(df_ino_ali['Groupe'] == groupe_LB_ino) & (df_ino_ali['Substance'] == substances_LB_ino)]
    
            fig = px.bar(df_filtered_groupe, x='LB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)
            fig.update_layout(
                yaxis={'categoryorder': 'total ascending'},
                legend_title_text='Substances',
            )

            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

        with tab2:
            st.markdown("")
            image = Image.open('Heatmap/Heatmap_ino_MB.png')
            st.image(image, use_column_width=True)

            col1, col2, col3 = st.columns(3)
    
            with col3:
                substances_MB_ino = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_MB_ino")
                df_filtered_substance = df_ino_groupe[df_ino_groupe['Substance'] == substances_MB_ino]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['MB'])

            fig = px.bar(df_filtered_substance, x='MB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True
                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
    
            with col3:
                #Groupe
                choix_groupe = df_ino_ali['Groupe'].unique().astype(str).tolist()
                # D√©finir la valeur par d√©faut
                valeur_par_defaut = "Crustac√©s et mollusques"
                # Trouver l'index correspondant √† la valeur par d√©faut
                index_valeur_par_defaut = choix_groupe.index(valeur_par_defaut)
                groupe_MB_ino= st.selectbox("Choix du groupe d'aliments", choix_groupe,index=index_valeur_par_defaut, key="groupe_MB_ino")
                df_filtered_groupe = df_ino_ali.loc[(df_ino_ali['Groupe'] == groupe_MB_ino) & (df_ino_ali['Substance'] == substances_MB_ino)]
    

            fig = px.bar(df_filtered_groupe, x='MB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')


    
        with tab3:
            st.markdown("")
            image = Image.open('Heatmap/Heatmap_ino_UB.png')
            st.image(image, use_column_width=True)


            col1, col2, col3 = st.columns(3)
    
            with col3:
                substances_UB_ino = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_UB_ino")
                df_filtered_substance = df_ino_groupe[df_ino_groupe['Substance'] == substances_UB_ino]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['UB'])

            fig = px.bar(df_filtered_substance, x='UB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True

                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
    
            with col3:
                groupe_UB_ino= st.selectbox("Choix du groupe d'aliments", choix_groupe, key="groupe_UB_ino")
                df_filtered_groupe = df_ino_ali.loc[(df_ino_ali['Groupe'] == groupe_UB_ino) & (df_ino_ali['Substance'] == substances_UB_ino)]
    

            fig = px.bar(df_filtered_groupe, x='UB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')
    
    if substances == "Additifs":
        modalites = ['Sulfites', 'Nitrites', 'Rocou  (E160b)','Acide tartrique  (E334)']

        # Cr√©ation du nouveau dataframe avec les modalit√©s sp√©cifi√©es
        df_addi = df_addi[df_addi['Substance'].isin(modalites)]

        tab1, tab2, tab3 = st.tabs(["Hypoth√®se Basse", "Hypoth√®se Moyenne","Hypoth√®se Haute"])
        df_addi_ali = df_addi.groupby(['Aliment','Substance' ]).agg({'LB': 'mean', 'UB': 'mean', 'MB': 'mean', "Groupe":lambda x: x.mode().iat[0]}).reset_index()
        df_addi_groupe = df_addi.groupby(['Groupe', 'Substance']).agg({'LB': 'mean', 'UB': 'mean', 'MB': 'mean'}).reset_index()

        choix_substances = df_addi['Substance'].unique()
        choix_groupe = df_addi['Groupe'].unique()

        with tab1:

            col1, col2, col3 = st.columns(3)
    
            with col3:
                #Groupe
                choix_groupe = df_addi_groupe['Substance'].unique().astype(str).tolist()
                # D√©finir la valeur par d√©faut
                valeur_par_defaut = "Acide tartrique  (E334)"
                # Trouver l'index correspondant √† la valeur par d√©faut
                index_valeur_par_defaut = choix_groupe.index(valeur_par_defaut)

                substances_LB_addi = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances,index=index_valeur_par_defaut, key="substances_LB_addi")
                df_filtered_substance = df_addi_groupe[df_addi_groupe['Substance'] == substances_LB_addi]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['LB'])

            fig = px.bar(df_filtered_substance, x='LB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True
                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
            with col3:
                #Groupe
                choix_groupe = df_addi_ali['Groupe'].unique().astype(str).tolist()

                groupe_LB_addi= st.selectbox("Choix du groupe d'aliments", choix_groupe, key="groupe_LB_addi")
                df_filtered_groupe = df_addi_ali.loc[(df_addi_ali['Groupe'] == groupe_LB_addi) & (df_addi_ali['Substance'] == substances_LB_addi)]
                df_filtered_groupe = df_filtered_groupe.dropna(axis = 0, how = 'all', subset = ['LB'])
    
            fig = px.bar(df_filtered_groupe, x='LB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

        with tab2:

            col1, col2, col3 = st.columns(3)
    
            with col3:
                substances_MB_addi = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_MB_addi")
                df_filtered_substance = df_addi_groupe[df_addi_groupe['Substance'] == substances_MB_addi]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['MB'])
                

            fig = px.bar(df_filtered_substance, x='MB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True
                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
    
            with col3:
                #Groupe
                choix_groupe = df_addi_ali['Groupe'].unique().astype(str).tolist()
                # D√©finir la valeur par d√©faut
                valeur_par_defaut = "Charcuterie"
                # Trouver l'index correspondant √† la valeur par d√©faut
                index_valeur_par_defaut = choix_groupe.index(valeur_par_defaut)

                groupe_MB_addi = st.selectbox("Choix du groupe d'aliments", choix_groupe,index=index_valeur_par_defaut, key="groupe_MB_addi")
                df_filtered_groupe = df_addi_ali.loc[(df_addi_ali['Groupe'] == groupe_MB_addi) & (df_addi_ali['Substance'] == substances_MB_addi)]
                df_filtered_groupe = df_filtered_groupe.dropna(axis = 0, how = 'all', subset = ['MB'])
    

            fig = px.bar(df_filtered_groupe, x='MB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')


    
        with tab3:


            col1, col2, col3 = st.columns(3)
    
            with col3:
                substances_UB_addi = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_UB_addi")
                df_filtered_substance = df_addi_groupe[df_addi_groupe['Substance'] == substances_UB_addi]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['UB'])

            fig = px.bar(df_filtered_substance, x='UB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True

                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
    
            with col3:
                #Groupe
                choix_groupe = df_addi_ali['Groupe'].unique().astype(str).tolist()
                # D√©finir la valeur par d√©faut
                valeur_par_defaut = "Charcuterie"
                # Trouver l'index correspondant √† la valeur par d√©faut
                index_valeur_par_defaut = choix_groupe.index(valeur_par_defaut)

                groupe_UB_addi = st.selectbox("Choix du groupe d'aliments", choix_groupe,index=index_valeur_par_defaut, key="groupe_UB_addi")
                df_filtered_groupe = df_addi_ali.loc[(df_addi_ali['Groupe'] == groupe_UB_addi) & (df_addi_ali['Substance'] == substances_UB_addi)]
                df_filtered_groupe = df_filtered_groupe.dropna(axis = 0, how = 'all', subset = ['UB'])
    

            fig = px.bar(df_filtered_groupe, x='UB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')


    if substances == "Pesticides":
        modalites = ['Abamectin', 'Acephate', 'Acetamiprid', 'Acibenzolar-S-methyl',
       'Acrinathrin', 'Aldicarb', 'Aldicarb-sulfone',
       'Aldicarb-sulfoxide', 'Aldrin', 'Allethrin-bioallethrin',
       'Alphamethrin', 'Amitraz', 'Anthraquinone', 'Atrazine',
       'Atrazine-d-s-thyl-d-isopropyl', 'Azametiphos', 'Azinphos-ethyl',
       'Azinphos-methyl', 'Azocyclotin', 'Azoxystrobin', 'Benalaxyl',
       'Bendiocarb', 'Benfuracarb', 'Benomyl', 'Bifenthrin', 'Binapacryl',
       'Bioallethrine-Depallethrin', 'Bioresmethrin', 'Biphenyl',
       'Bitertanol', 'Boscalid', 'Bromophos-bromophos-methyl',
       'Bromophos-ethyl', 'Bromopropylate', 'Bromuconazole', 'Bupirimate',
       'Buprofezin', 'Cadusafos', 'Camphechlor-Toxaphene', 'Captafol',
       'Captan', 'Carbaryl', 'Carbendazim', 'Carbetamide', 'Carbofuran',
       'Carbophenothion', 'Carbosulfan', 'Carboxin', 'Chinomethionat',
       'Chlordan-Alpha', 'Chlordan-Gamma', 'Chlordane', 'Chlorfenvinphos',
       'Chlorfluazuron', 'Chlormephos', 'Chlorobenzilate',
       'Chlorofenizon', 'Chloropropylate', 'Chlorothalonil',
       'Chlorpropham', 'Chlorpyrifos-ethyl', 'Chlorpyrifos-methyl',
       'Chlortal-dimethyl', 'Chlozolinate', 'Clofentezine', 'Coumaphos',
       'Cyanofenphos', 'Cyanophos', 'Cyfluthrin', 'Cyhexatin',
       'Cymoxanil', 'Cypermethrin', 'Cyproconazole', 'Cyprodinyl',
       'Cyromazine', 'DDD-4-4-TDE', 'DDE-4-4', 'DDT-2-4', 'DDT-4-4',
       'Deltamethrin', 'Demeton-S-methylsulphon', 'Desmetryne',
       'Di-allate', 'Dialiphos', 'Diazinon', 'Dicamba', 'Dichlobenil',
       'Dichlofenthion', 'Dichlofluanid', 'Dichloran', 'Dichlorprop-P',
       'Dichlorvos', 'Diclobutrazol', 'Dicofol', 'Dieldrin', 'Dienochlor',
       'Diethofencarb', 'Difenoconazole', 'Diflubenzuron', 'Dimethoate',
       'Dimethomorph', 'Diniconazole', 'Dinocap', 'Dioxacarb',
       'Diphenylamine', 'Diquat', 'Disulfoton', 'Ditalimfos',
       'Dithiocarbamates', 'Diuron', 'Endosulfan-Alpha',
       'Endosulfan-Beta', 'Endosulfan-Sulfate', 'Endosulfan', 'Endrin',
       'Endrin-ketone', 'Epoxiconazole', 'Esfenvalerate', 'Ethiofencarb',
       'Ethion', 'Ethirimol', 'Ethoprophos', 'Ethoxyquin', 'Etofenprox',
       'Etridiazole', 'Etrimfos', 'Fenamidone', 'Fenamiphos',
       'Fenamiphos-sulfone', 'Fenarimol', 'Fenazaquin', 'Fenbuconazole',
       'Fenbutatin-oxide', 'Fenchlorphos', 'Fenhexamid', 'Fenitrothion',
       'Fenoxycarb', 'Fenpropathrin', 'Fenpropidine', 'Fenpropimorph',
       'Fenpyroximate', 'Fenson', 'Fenthion', 'Fenthion-sulfone',
       'Fenthion-sulfoxide', 'Fentin-acetate', 'Fentin-hydroxide',
       'Fenvalerate', 'Fipronil', 'Fluazifop-P-butyl', 'Flubenzimine',
       'Fludioxonyl', 'Flufenoxuron', 'Fluquinconazole', 'Flusilazole',
       'Flutolanil', 'Flutriafol', 'Fluvalinate', 'Folpet', 'Fonofos',
       'Formothion', 'Furalaxyl', 'Furathiocarb', 'HCH', 'HCH-alpha',
       'HCH-beta', 'HCH-delta', 'Haloxyfop', 'Heptachlor',
       'Heptachlor-epoxide', 'Heptachlore-poxyde-cis',
       'Heptachlore-poxyde-trans', 'Heptenophos', 'Hexachlorobenzene',
       'Hexaconazole', 'Hexaflumuron', 'Hexythiazox',
       'Hydroxycarbofuran-3', 'Imazalil', 'Imidacloprid', 'Indoxacarbe',
       'Iodofenphos', 'Iprodione', 'Iprovalicarb', 'Isazofos',
       'Isofenphos', 'Isofenphos-methyl', 'Kresoxim-methyl',
       'Lambda-Cyhalothrin', 'Lindane-HCH-gamma', 'Linuron', 'Malaoxon',
       'Malathion', 'Mecarbam', 'Mepanipyrim', 'Mepiquat', 'Mepronil',
       'Metalaxyl', 'Metconazole', 'Methacrifos', 'Methamidophos',
       'Methidathion', 'Methiocarb', 'Methiocarb-sulfone',
       'Methiocarb-sulfoxyde', 'Methomyl', 'Methoxychlor', 'Metolachlor',
       'Metoxuron', 'Metrafenone', 'Metribuzine', 'Mevinphos', 'Mirex',
       'Monalid', 'Monocrotophos', 'Myclobutanil', 'Naled', 'Nitrofen',
       'Nitrothal-isopropyl', 'Nuarimol', 'Ofurace', 'Omethoate',
       'Oxadixyl', 'Oxamyl', 'Oxydemeton-methyl',
       'P-p-Dichlorobenzophenon', 'Paraoxon', 'Paraoxon-methyl',
       'Paraquat', 'Parathion', 'Parathion-methyl', 'Penconazole',
       'Pencycuron', 'Pendimethalin', 'Pentachloroaniline',
       'Pentachloroanisole', 'Pentachlorophenol',
       'Pentachlorophenol-acetate', 'Permethrin', 'Phorate',
       'Phorate-Sulfone', 'Phorate-sulfoxide', 'Phosalone', 'Phosmet',
       'Phosmet-oxon', 'Phosphamidon', 'Phoxim', 'Picoxystrobin',
       'Piperonyl-butoxide', 'Pirimiphos-ethyl', 'Pirimiphos-methyl',
       'Prochloraz', 'Procymidone', 'Profenofos', 'Promecarb',
       'Prometryn', 'Propachlor', 'Propamocarb', 'Propargite',
       'Propetamphos', 'Propham', 'Propiconazole', 'Propoxur',
       'Propyzamid', 'Prothiofos', 'Pymetrozine', 'Pyraclostrobin',
       'Pyrazophos', 'Pyrethrins', 'Pyridaben', 'Pyridaphenthion',
       'Pyridate', 'Pyrimethanil', 'Pyrimicarb', 'Pyriproxyfen',
       'Quinalphos', 'Quinoxyfen', 'Quintozene', 'Rotenon', 'Simazine',
       'Spiroxamine', 'Sulfotep', 'Sulfur', 'Tau-Fluvalinate',
       'Tebuconazole', 'Tebufenozid', 'Tebufenpyrad', 'Tecnazene',
       'Teflubenzuron', 'Tefluthrin', 'Temefos', 'Terbufos',
       'Tetrachlorvinphos', 'Tetraconazole', 'Tetradifon', 'Tetramethrin',
       'Tetrasul', 'Thiabendazole', 'Thiodicarb', 'Thiometon',
       'Thiophanate-methyl', 'Toclofos-methyl', 'Tolylfluanide',
       'Tralomethrin', 'Tri-allate', 'Triadimefon', 'Triadimenol',
       'Triazophos', 'Tribromoanisole', 'Tribromophenol-2-4-6',
       'Trichlorfon', 'Trichloronat', 'Trifloxystrobin', 'Triflumuron',
       'Trifluralin', 'Triforine', 'Triticonazole', 'Vamidothion',
       'Vinclozolin', '2-4-D', '2-Phenylphenol (incl, OPP)',
       '3-5-Dichloroaniline']

       # Cr√©ation du nouveau dataframe avec les modalit√©s sp√©cifi√©es
        df_pesti = df_pesti[df_pesti['Substance'].isin(modalites)]

        tab1, tab2, tab3 = st.tabs(["Hypoth√®se Basse", "Hypoth√®se Moyenne","Hypoth√®se Haute"])
        df_pesti_ali = df_pesti.groupby(['Aliment','Substance' ]).agg({'LB': 'mean', 'UB': 'mean', 'MB': 'mean', "Groupe":lambda x: x.mode().iat[0]}).reset_index()
        df_pesti_groupe = df_pesti.groupby(['Groupe', 'Substance']).agg({'LB': 'mean', 'UB': 'mean', 'MB': 'mean'}).reset_index()

        choix_substances = df_pesti['Substance'].unique()
        choix_groupe = df_pesti['Groupe'].unique()

        with tab1:

            col1, col2, col3 = st.columns(3)
    
            with col3:
                
                #Groupe
                choix_groupe = ['Acrinathrin', 'Azinphos-methyl', 'Azoxystrobin', 'Bifenthrin',
       'Boscalid', 'Bupirimate', 'Captan', 'Carbendazim', 'Carbofuran',
       'Chlorfenvinphos', 'Chlorothalonil', 'Chlorpropham',
       'Chlorpyrifos-ethyl', 'Chlorpyrifos-methyl', 'Chlortal-dimethyl',
       'Cyproconazole', 'Cyprodinyl', 'Diethofencarb', 'Dimethoate',
       'Diphenylamine', 'Endosulfan-Beta', 'Endosulfan-Sulfate', 'Ethion',
       'Ethoxyquin', 'Etofenprox', 'Fenbuconazole', 'Fenhexamid',
       'Fludioxonyl', 'Flutriafol', 'Folpet', 'Imazalil', 'Iprodione',
       'Kresoxim-methyl', 'Lambda-Cyhalothrin', 'Lindane-HCH-gamma',
       'Mepanipyrim', 'Metalaxyl', 'Myclobutanil', 'Omethoate',
       'Phosalone', 'Phosmet', 'Piperonyl-butoxide', 'Pirimiphos-methyl',
       'Procymidone', 'Propargite', 'Pyrimethanil', 'Pyriproxyfen',
       'Quinoxyfen', 'Sulfur', 'Tebuconazole', 'Teflubenzuron',
       'Tetradifon', 'Thiabendazole', 'Thiophanate-methyl', 'Triadimenol',
       'Triflumuron', 'Vinclozolin', '2-Phenylphenol (incl, OPP)']
                # D√©finir la valeur par d√©faut
                valeur_par_defaut = "Iprodione"
                # Trouver l'index correspondant √† la valeur par d√©faut
                index_valeur_par_defaut = choix_groupe.index(valeur_par_defaut)

                substances_LB_pesti = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances,index=index_valeur_par_defaut, key="substances_LB_pesti")
                df_filtered_substance = df_pesti_groupe[df_pesti_groupe['Substance'] == substances_LB_pesti]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['LB'])

            fig = px.bar(df_filtered_substance, x='LB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True
                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
            with col3:
                #Groupe
                choix_groupe = df_pesti_ali['Groupe'].unique().astype(str).tolist()

                groupe_LB_pesti= st.selectbox("Choix du groupe d'aliments", choix_groupe, key="groupe_LB_pesti")
                df_filtered_groupe = df_pesti_ali.loc[(df_pesti_ali['Groupe'] == groupe_LB_pesti) & (df_pesti_ali['Substance'] == substances_LB_pesti)]
                df_filtered_groupe = df_filtered_groupe.dropna(axis = 0, how = 'all', subset = ['LB'])
    
            fig = px.bar(df_filtered_groupe, x='LB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

        with tab2:

            col1, col2, col3 = st.columns(3)
    
            with col3:
                substances_MB_pesti = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_MB_pesti")
                df_filtered_substance = df_pesti_groupe[df_pesti_groupe['Substance'] == substances_MB_pesti]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['MB'])
                

            fig = px.bar(df_filtered_substance, x='MB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True
                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
    
            with col3:
                #Groupe
                choix_groupe = df_pesti_ali['Groupe'].unique().astype(str).tolist()
                # D√©finir la valeur par d√©faut
                valeur_par_defaut = "L√©gumes (hors pomme de terre)"
                # Trouver l'index correspondant √† la valeur par d√©faut
                index_valeur_par_defaut = choix_groupe.index(valeur_par_defaut)

                groupe_MB_pesti = st.selectbox("Choix du groupe d'aliments", choix_groupe,index=index_valeur_par_defaut, key="groupe_MB_pesti")
                df_filtered_groupe = df_pesti_ali.loc[(df_pesti_ali['Groupe'] == groupe_MB_pesti) & (df_pesti_ali['Substance'] == substances_MB_pesti)]
                df_filtered_groupe = df_filtered_groupe.dropna(axis = 0, how = 'all', subset = ['MB'])
    

            fig = px.bar(df_filtered_groupe, x='MB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')


    
        with tab3:


            col1, col2, col3 = st.columns(3)
    
            with col3:
                substances_UB_pesti = st.selectbox("S√©lectionner la substance que vous souhaitez analyser :", choix_substances, key="substances_UB_pesti")
                df_filtered_substance = df_pesti_groupe[df_pesti_groupe['Substance'] == substances_UB_pesti]
                df_filtered_substance = df_filtered_substance.dropna(axis = 0, how = 'all', subset = ['UB'])

            fig = px.bar(df_filtered_substance, x='UB', y='Groupe')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                      yaxis={'categoryorder': 'total ascending'},
                      legend_title_text='Substances',
                      #ascending=True

                  )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            col1, col2, col3 = st.columns(3)
    
            with col3:
                #Groupe
                choix_groupe = df_pesti_ali['Groupe'].unique().astype(str).tolist()
                # D√©finir la valeur par d√©faut
                valeur_par_defaut = "L√©gumes (hors pomme de terre)"
                # Trouver l'index correspondant √† la valeur par d√©faut
                index_valeur_par_defaut = choix_groupe.index(valeur_par_defaut)

                groupe_UB_pesti = st.selectbox("Choix du groupe d'aliments", choix_groupe,index=index_valeur_par_defaut, key="groupe_UB_pesti")
                df_filtered_groupe = df_pesti_ali.loc[(df_pesti_ali['Groupe'] == groupe_UB_pesti) & (df_pesti_ali['Substance'] == substances_UB_pesti)]
                df_filtered_groupe = df_filtered_groupe.dropna(axis = 0, how = 'all', subset = ['UB'])
    

            fig = px.bar(df_filtered_groupe, x='UB', y='Aliment')
            fig.update_xaxes(title="Concentration dans l'aliment en ¬µg/g")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                    legend_title_text='Substances',
                    #ascending=True
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')
  

        

if selected == "Aliments contributeurs":
    st.subheader("Exposition alimentaire de la population aux substances chimiques")
    st.markdown("""L‚Äôexposition est la quantit√© d‚Äôune substance ing√©r√©e par le consommateur. Elle se calcule pour une personne via son alimentation en prenant en compte √† la fois le niveau de contamination de tous les diff√©rents aliments / groupe d‚Äôaliments par cette substance, sa consommation individuelle de ces aliments ainsi que son poids corporel. 
\nL‚Äôexposition est calcul√©e pour tous les individus et une exposition moyenne de la population est ainsi calcul√©e. Elle repr√©sente la quantit√© moyenne d‚Äôune substance ing√©r√©e par la population via son r√©gime alimentaire total.
\nSi l‚Äôon souhaite conna√Ætre la part apport√©e par chaque groupe d‚Äôaliments dans cette quantit√© de substance ing√©r√©e par la population, on parlera de contribution √† l‚Äôexposition totale. Celle-ci, exprim√©e en pourcentage, repr√©sente la quantit√© de substance apport√©e par un groupe d‚Äôaliments par rapport √† tout le r√©gime alimentaire. La somme des contributions est √©gale √† 100%.
""")
    st.markdown("Pour en savoir plus sur le traitement des donn√©es inf√©rieures aux limites analytiques et les hypoth√®ses de censure, ***voir l‚Äôonglet Contamination***")

    col1, col2, col3, col4, col5, col6 = st.columns(6)
    
    with col2:
        width = 700
        st.image("media/Hypotheses_Analyses.png", width=width)

    col1, col2, col3= st.columns(3)

    with col3:
        substances = st.selectbox(
        "Choix de la famille de substances",
        ('Contaminants inorganiques et min√©raux','Acrylamide', 'HAP', 'Dioxines, PCB','Perfluor√©s','Brom√©s','Phytoestrog√®nes','Mycotoxines','Additifs','Pesticides'))

    if substances == "Acrylamide":
        st.markdown("")

    if substances == "HAP":
        st.markdown("")
    
    if substances == "Dioxines, PCB":
        st.markdown("")

    if substances == "Perfluor√©s":
        st.markdown("")
    
    if substances == "Brom√©s":
        st.markdown("")

    if substances == "Contaminants inorganiques et min√©raux":

        tab1, tab2, tab3 = st.tabs(["Hypoth√®se Basse", "Hypoth√®se Moyenne","Hypoth√®se Haute"])

        with tab1:
            
            col1, col2, col3= st.columns(3)

            with col3:
              #SelectBox
              contrib_option_substances_ino_ub = st.selectbox('S√©lectionner la substance que vous souhaitez analyser :',
                                                  df_contrib_LB_UB['Substance'].unique(),
                                                  key='substances_ub')

              # Convertir la valeur unique en liste
              selected_substances = [contrib_option_substances_ino_ub]
              # Filtrer les donn√©es en fonction des options s√©lectionn√©es
              df_filtered_contrib = df_contrib_LB_UB[df_contrib_LB_UB['Substance'].isin(selected_substances)]


              # Filtrer les donn√©es en fonction des options s√©lectionn√©es
              df_filtered_contrib = df_contrib_LB_UB[df_contrib_LB_UB['Substance'].isin([contrib_option_substances_ino_ub])]

            # V√©rifier si des substances et familles d'aliments ont √©t√© s√©lectionn√©es
            fig = px.bar(df_filtered_contrib, x='Contribution_UB', y="Groupe d'aliments",color_discrete_sequence=['#00AC8C']) 
            fig.update_xaxes(title="% de la contribution √† l‚Äôexposition totale")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')


            # Texte dynamique en fonction du choix de l'utilisateur
            if contrib_option_substances_ino_ub == 'Arsenic inorganique':
                st.caption("L‚Äôarsenic (As) est un √©l√©ment pr√©sent dans la cro√ªte terrestre. Il provient √©galement des activit√©s industrielles, de la combustion de produits fossiles, d'anciennes utilisations agricoles, etc. Il existe sous diff√©rentes formes chimiques, organiques ou inorganiques. Par ingestion, l‚Äôarsenic peut entra√Æner des l√©sions cutan√©es, des cancers, une toxicit√© sur le d√©veloppement, une neurotoxicit√©, des maladies cardiovasculaires, une perturbation du m√©tabolisme du glucose et du diab√®te.")
            elif contrib_option_substances_ino_ub == 'Plomb':
                st.caption("Le plomb (Pb) est un m√©tal naturellement pr√©sent dans la cro√ªte terrestre. Son utilisation intensive par l‚Äôhomme (activit√©s mini√®res et industrielles : fonderies, accumulateurs, pigments, alliages, munitions, etc.) est √† l‚Äôorigine d‚Äôune forte dispersion dans l‚Äôenvironnement. L‚Äôhomme y est expos√© principalement par les aliments et l‚Äôeau qu‚Äôil consomme, mais aussi via l‚Äôair, le sol et les poussi√®res. Du fait de son interdiction depuis la fin des ann√©es 90 dans l‚Äôessence automobile, les peintures utilis√©es √† l‚Äôint√©rieur des habitations et les canalisations d‚Äôeau, le niveau d‚Äôexposition a fortement diminu√© ces dix derni√®res ann√©es. Chez l‚Äôhomme, le principal organe cible est le syst√®me nerveux central, en particulier au cours du d√©veloppement chez le foetus et le jeune enfant. Chez l‚Äôadulte, le plomb a des effets sur les reins et sur le syst√®me cardiovasculaire.")
            elif contrib_option_substances_ino_ub == 'Cadmium':
                st.caption("Le cadmium (Cd) est un m√©tal lourd qui se retrouve dans les diff√©rents compartiments de l‚Äôenvironnement (sols, eau, air) du fait de sa pr√©sence √† l‚Äô√©tat naturel dans la cro√ªte terrestre et des activit√©s industrielles et agricoles.  La source principale d‚Äôexposition au cadmium varie selon le type de population : l‚Äôalimentation pour la population g√©n√©rale, la fum√©e de cigarette et l‚Äôair ambiant pour les travailleurs expos√©s en milieu industriel.Chez l‚Äôhomme, une exposition prolong√©e au cadmium par voie orale induit une atteinte r√©nale. Une fragilit√© osseuse, des troubles de la reproduction ont √©galement √©t√© r√©pertori√©s, ainsi qu‚Äôun risque accru de cancer ayant donn√© lieu √† un classement comme ¬´ canc√©rog√®ne pour l‚Äôhomme ¬ª (groupe 1) par le Centre International de Recherche sur le Cancer (CIRC) en 1993.")
            elif contrib_option_substances_ino_ub == 'Aluminium':
                st.caption("L‚Äôaluminium (Al) est l‚Äô√©l√©ment m√©tallique le plus abondant de la cro√ªte terrestre. Du fait de ses propri√©t√©s physico-chimiques (basse densit√©, mall√©abilit√©, r√©sistance √† la corrosion, etc.), il est utilis√© dans de nombreux domaines industriels (agro-alimentaire, pharmaceutique, b√¢timent, etc.) et pour le traitement des eaux d‚Äôalimentation. Il est pr√©sent dans les aliments et l‚Äôeau sous diff√©rentes formes chimiques qui d√©terminent sa toxicit√©. Les effets toxiques de l‚Äôaluminium portent essentiellement sur le syst√®me nerveux central (enc√©phalopathies, troubles psychomoteurs) et sur le tissu osseux. Chez l‚Äôhomme, ces effets sont observ√©s chez des sujets expos√©s par d‚Äôautres voies que l‚Äôalimentation, conduisant √† l‚Äôaccumulation de fortes quantit√©s d‚Äôaluminium : patients insuffisants r√©naux dialys√©s, alimentation parent√©rale, personnes professionnellement expos√©es. ")
            elif contrib_option_substances_ino_ub == 'Antimoine':
                st.caption("L‚Äôantimoine (Sb) est un m√©tallo√Øde tr√®s peu abondant dans la cro√ªte terrestre. Il est utilis√© dans les alliages m√©talliques pour en accro√Ætre la duret√©, dans la fabrication de semi-conducteurs, dans les plastiques et les feux d‚Äôartifices. Le trioxyde d‚Äôantimoine est employ√© comme ignifugeant pour les textiles et les mati√®res plastiques, comme opacifiant pour les verres, les c√©ramiques et les √©maux, comme pigment pour les peintures et comme catalyseur chimique. Le trioxyde d‚Äôantimoine a √©t√© class√© consid√©r√© comme ¬´ peut-√™tre canc√©rog√®ne pour l‚Äôhomme ¬ª (groupe 2B) par le Centre International de Recherche sur le Cancer (CIRC) en 1989. Les sels solubles d‚Äôantimoine provoquent, apr√®s ingestion, des effets irritants au niveau gastro-intestinal se traduisant par des vomissements, des crampes abdominales et des diarrh√©es. Une toxicit√© cardiaque ou oculaire est aussi rapport√©e √† fortes doses. ")
            elif contrib_option_substances_ino_ub == 'Baryum':
                st.caption("Le baryum (Ba) est un m√©tal pr√©sent dans de nombreux minerais. Son utilisation concerne de nombreux domaines (pesticides, textiles, pigments, traitement d‚Äôeaux, m√©dical, etc.).Les sels solubles de baryum sont bien absorb√©s et se d√©posent essentiellement au niveau du tissu osseux. Il n‚Äôa pas √©t√© d√©montr√© d‚Äôeffet canc√©rog√®ne ni mutag√®ne (alt√©ration de la structure de l'ADN). Les travailleurs expos√©s r√©guli√®rement par inhalation au baryum peuvent pr√©senter des manifestations pulmonaires b√©nignes sans troubles fonctionnels associ√©s. ")
            elif contrib_option_substances_ino_ub == 'Gallium':
                st.caption("Le gallium (Ga) est un m√©tal provenant essentiellement de l‚Äôextraction de l‚Äôaluminium et du zinc. Essentiellement sous forme de sels, il est utilis√© en petite quantit√© pour la fabrication de semi-conducteurs, dans l‚Äôindustrie √©lectrique et √©lectronique ; c‚Äôest un substitut du mercure pour les lampes √† arc et les thermom√®tres pour hautes temp√©ratures. Plusieurs utilisations m√©dicales sont d√©crites : traceur radioactif, alliage dentaires, traitement des hypercalc√©mies tumorales. Dans le contexte de l‚Äôexposition professionnelle, le gallium et ses compos√©s p√©n√®trent par voie respiratoire, et tr√®s peu par voie digestive. La r√©tention de gallium au niveau pulmonaire est certaine chez l‚Äôanimal. L‚Äôabsorption √† partir du tube digestif semble faible. Il est transport√© par le sang, et se distribue dans le foie, la rate, les tissus osseux et la moelle osseuse. La toxicit√© est bas√©e essentiellement sur des √©tudes animales et varie selon les esp√®ces et les compos√©s du gallium. Les organes cibles sont le poumon, le syst√®me h√©matopo√Ø√©tique (ormation des globules sanguins), le syst√®me immunitaire, le rein et l‚Äôappareil reproducteur male.  L‚Äôars√©niure de gallium est class√© par le Centre International de Recherche sur le Cancer parmi les ¬´ canc√©rog√®nes pour l‚Äôhomme ¬ª (groupe 1) en s‚Äôappuyant surtout sur des donn√©es exp√©rimentales animales et sans en avoir d√©montr√© le m√©canisme d‚Äôaction.")
            elif contrib_option_substances_ino_ub == 'Germanium':
                st.caption("Le germanium (Ge) est un m√©tallo√Øde pr√©sent naturellement dans la cro√ªte terrestre. Il peut exister sous forme organique ou inorganique. G√©n√©ralement obtenu √† partir du raffinage du cuivre, du zinc et du plomb, il est utilis√© principalement dans le secteur de l‚Äô√©lectronique (diodes, transistors, etc.) et du verre (√©l√©ment optique) du fait de ses propri√©t√©s proches de celles du silicium. Dans certains pays, il est √©galement commercialis√© sous forme organique en tant que compl√©ment alimentaire. L‚Äôabsorption du germanium au niveau intestinal est rapide et compl√®te. Son √©limination est principalement urinaire. Il n‚Äôest ni mutag√®ne (alt√©ration de la structure de l'ADN), ni canc√©rig√®ne sous ses formes ioniques ou dioxyde de germanium. Plusieurs cas rapport√©s de patients expos√©s de mani√®re r√©p√©t√©e √† de fortes doses de germanium (compl√©ment alimentaire) indiquent notamment des perturbations au niveau r√©nal.")
            elif contrib_option_substances_ino_ub == 'Tellure':
                st.caption("Le tellure (Te) est un metallo√Øde issu principalement des r√©sidus d‚Äôaffinage du cuivre. Il est utilis√© principalement en m√©tallurgie (alliage), dans l‚Äôindustrie chimique (caoutchouc, plastique) et dans l‚Äô√©lectronique. Le tellure est absorb√© par ingestion et √©limin√© en partie dans les urines. Il n‚Äôest ni mutag√®ne (alt√©ration de la structure de l'ADN), ni canc√©rog√®ne. Des effets t√©ratog√®nes (susceptible de provoquer des malformations cong√©nitales chez les enfants expos√©s in utero) ont √©t√© observ√©s chez des rats expos√©s oralement √† des doses √©lev√©es de tellure dans la nourriture. En milieu professionnel, l‚Äôexposition par inhalation au tellure peut engendrer des sympt√¥mes sans gravit√© particuli√®re, caract√©ris√©s essentiellement par une haleine alliac√©e.")
            elif contrib_option_substances_ino_ub == 'Vanadium':
                st.caption("Le vanadium (V) est un m√©tal que l‚Äôon retrouve √† l‚Äô√©tat naturel. Il est principalement utilis√© en m√©tallurgie pour augmenter la r√©sistance des aciers, et dans d‚Äôautres industries pour ses propri√©t√©s catalytiques, colorantes ou anticorrosives. Le r√¥le fonctionnel du vanadium n‚Äôa pas √©t√© clairement caract√©ris√© chez l‚Äôanimal ou chez l‚Äôhomme. Selon la dose, le vanadium pourrait avoir des effets sur les m√©tabolismes lipidique et glucidique et dans la fonction thyro√Ødienne. Le vanadium est peu absorb√© par voie orale (<1%). Chez l‚Äôanimal, les √©tudes exp√©rimentales indiquent que les effets les plus sensibles observ√©s suite √† l‚Äôingestion de sels de vanadium sont des perturbations au niveau sanguin (pression art√©rielle et taux de globules rouges), des syst√®mes nerveux et r√©nal et du d√©veloppement. Des √©tudes exp√©rimentales sur un compos√© de vanadium (le pentoxyde de vanadium) r√©v√®lent d‚Äôautres effets toxiques (atteinte de la rate, des reins, des poumons et cancers) mais la pr√©sence de cette forme dans les aliments n‚Äôa jamais √©t√© d√©montr√©e. ")
            elif contrib_option_substances_ino_ub == 'Nickel':
                st.caption("Le nickel (Ni) est un m√©tal naturellement pr√©sent dans la cro√ªte terrestre dont les propri√©t√©s de mall√©abilit√©, de magn√©tisme, de conduction de la chaleur et de l‚Äô√©lectricit√© conduisent √† le retrouver dans de tr√®s nombreuses applications industrielles principalement sous forme d‚Äôalliages (aciers inoxydables) et de catalyseurs pour les constructions automobile, navale et a√©ronautique, et les industries √©lectriques. Le nickel se retrouve sous une grande vari√©t√© de formes chimiques inorganiques (m√©tal, oxydes, sels) ou organiques. L‚Äôhomme y est expos√© par inhalation (exposition professionnelle), par la consommation d‚Äôeau et d‚Äôaliments et par contact cutan√©. Dans ce dernier cas, il est allergisant et peut provoquer une dermatite de contact. Les effets canc√©rog√®nes des compos√©s du nickel observ√©s apr√®s une exposition par inhalation ont conduit √† une classification par le Centre International de Recherche sur le Cancer (CIRC) parmi les ¬´ canc√©rog√®nes pour l‚Äôhomme ¬ª (groupe 1). Toutefois, aucune √©tude par voie orale n‚Äôa montr√© d‚Äôeffet canc√©rog√®ne. Aucun compos√© du nickel n‚Äôest actuellement class√© comme mutag√®ne (alt√©ration dela structure de l'ADN).")
            elif contrib_option_substances_ino_ub == 'Cobalt':
                st.caption("Le cobalt (Co) est un m√©tal naturellement pr√©sent dans la cro√ªte terrestre. Le cobalt et ses compos√©s min√©raux ont de nombreuses applications dans l‚Äôindustrie chimique et p√©troli√®re comme catalyseur, pour la fabrication d‚Äôalliages, comme pigment pour le verre et les c√©ramiques, comme agent s√©chant des peintures, etc. Il est √©galement utilis√© en tant qu‚Äôadditif dans les aliments pour animaux pour les esp√®ces capables de synth√©tiser la vitamine B12. On trouve le cobalt dans les produits animaux (sous forme de cobalamine) et dans les v√©g√©taux (sous forme inorganique). Chez l'homme, le cobalt absorb√© est majoritairement retrouv√© dans le foie et les reins. Chez l‚Äôanimal, les effets toxiques rapport√©s avec des sels de cobalt comprennent une polycyth√©mie (augmentation de la masse √©rythrocytaire totale), des modifications cardiaques, des alt√©rations fonctionnelles et morphologiques de la thyro√Øde, une d√©g√©n√©rescence et une atrophie testiculaires, une r√©duction de la croissance et de la survie de la descendance. Chez l‚Äôhomme, des cardiomyopathies ont √©t√© rapport√©es dans les ann√©es 60 chez des forts buveurs de bi√®re, auxquelles avait √©t√© ajout√© du cobalt en tant qu‚Äôagent stabilisateur de mousse. Les compos√©s du cobalt (II) ont √©t√© class√©s par le Centre International de Recherche surle Cancer (CIRC) comme ¬´ peut-√™tre canc√©rog√®nes pour l‚Äôhomme ¬ª (groupe 2B). Des √©tudes ont montr√© que les sels de cobalt sont capables d‚Äôinduire des alt√©rations g√©notoxiques tels que des dommages √† l‚ÄôADN, des mutations g√©niques, la formation de micronoyaux, des aberrations chromosomiques chez l‚Äôanimal par voie orale ou parent√©rale.")
            elif contrib_option_substances_ino_ub == 'Chrome':
                st.caption("Le chrome (Cr), un m√©tal abondant dans la cro√ªte terrestre, est utilis√© dans des alliages m√©talliques tels que l‚Äôacier inoxydable, en pigments, pour le tannage des peaux, etc. L‚Äôhomme y est expos√© par inhalation et par la consommation d‚Äôeau et d‚Äôaliments. Chez l‚Äôhomme, la d√©ficience en chrome a √©t√© observ√©e chez des patients recevant une nutrition parent√©rale totale sur le long terme. Les sympt√¥mes sont une alt√©ration de l‚Äôutilisation et de la tol√©rance au glucose, une alt√©ration du m√©tabolisme lipidique, une alt√©ration du m√©tabolisme de l‚Äôazote, une perte de poids. En cas de carences profondes, des effets neurologiques peuvent √™tre observ√©s. Chez l‚Äôenfant, aucune carence en chrome n‚Äôa √©t√© d√©crite en dehors d‚Äôune malnutrition prot√©ino-√©nerg√©tique s√©v√®re. Le chrome pr√©sente une toxicit√© nettement diff√©rente en fonction de sa valence. Diff√©rents compos√©s du chrome sont g√©notoxiques et sont class√©s par le Centre International de Recherche sur le Cancer comme ¬´ canc√©rog√®nes pour l‚Äôhomme ¬ª (groupe 1), du fait d‚Äôun exc√®s de risque de cancer du poumon chez les professionnels expos√©s par inhalation. Par voie orale, certaines donn√©es sugg√®rent une augmentation de l‚Äôincidence de cancer de l‚Äôestomac chez l‚ÄôHomme expos√© par l‚Äôeau de boisson. ")


            


        with tab2:

            col1, col2, col3= st.columns(3)

            with col3:
           
                #SelectBox
                contrib_option_substances_ino_mb = st.selectbox('S√©lectionner la substance que vous souhaitez analyser :',
                                                            df_contrib_MB['Substance'].unique())
                # Convertir la valeur unique en liste
                selected_substances = [contrib_option_substances_ino_mb]
                # Filtrer les donn√©es en fonction des options s√©lectionn√©es
                df_filtered_contrib = df_contrib_MB[df_contrib_MB['Substance'].isin(selected_substances)]

                # Filtrer les donn√©es en fonction des options s√©lectionn√©es
                df_filtered_contrib = df_contrib_MB[df_contrib_MB['Substance'].isin([contrib_option_substances_ino_mb])]

            # V√©rifier si des substances et familles d'aliments ont √©t√© s√©lectionn√©es
            fig = px.bar(df_filtered_contrib, x='Contribution_MB', y="Groupe d'aliments",color_discrete_sequence=['#00AC8C']) 
            fig.update_xaxes(title="% de la contribution √† l‚Äôexposition totale")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')
            
            # Texte dynamique en fonction du choix de l'utilisateur
            if contrib_option_substances_ino_mb == 'Arsenic inorganique':
                st.caption("L‚Äôarsenic (As) est un √©l√©ment pr√©sent dans la cro√ªte terrestre. Il provient √©galement des activit√©s industrielles, de la combustion de produits fossiles, d'anciennes utilisations agricoles, etc. Il existe sous diff√©rentes formes chimiques, organiques ou inorganiques. Par ingestion, l‚Äôarsenic peut entra√Æner des l√©sions cutan√©es, des cancers, une toxicit√© sur le d√©veloppement, une neurotoxicit√©, des maladies cardiovasculaires, une perturbation du m√©tabolisme du glucose et du diab√®te.")
            elif contrib_option_substances_ino_mb == 'Plomb':
                st.caption("Le plomb (Pb) est un m√©tal naturellement pr√©sent dans la cro√ªte terrestre. Son utilisation intensive par l‚Äôhomme (activit√©s mini√®res et industrielles : fonderies, accumulateurs, pigments, alliages, munitions, etc.) est √† l‚Äôorigine d‚Äôune forte dispersion dans l‚Äôenvironnement. L‚Äôhomme y est expos√© principalement par les aliments et l‚Äôeau qu‚Äôil consomme, mais aussi via l‚Äôair, le sol et les poussi√®res. Du fait de son interdiction depuis la fin des ann√©es 90 dans l‚Äôessence automobile, les peintures utilis√©es √† l‚Äôint√©rieur des habitations et les canalisations d‚Äôeau, le niveau d‚Äôexposition a fortement diminu√© ces dix derni√®res ann√©es. Chez l‚Äôhomme, le principal organe cible est le syst√®me nerveux central, en particulier au cours du d√©veloppement chez le foetus et le jeune enfant. Chez l‚Äôadulte, le plomb a des effets sur les reins et sur le syst√®me cardiovasculaire.")
            elif contrib_option_substances_ino_mb == 'Cadmium':
                st.caption("Le cadmium (Cd) est un m√©tal lourd qui se retrouve dans les diff√©rents compartiments de l‚Äôenvironnement (sols, eau, air) du fait de sa pr√©sence √† l‚Äô√©tat naturel dans la cro√ªte terrestre et des activit√©s industrielles et agricoles.  La source principale d‚Äôexposition au cadmium varie selon le type de population : l‚Äôalimentation pour la population g√©n√©rale, la fum√©e de cigarette et l‚Äôair ambiant pour les travailleurs expos√©s en milieu industriel.Chez l‚Äôhomme, une exposition prolong√©e au cadmium par voie orale induit une atteinte r√©nale. Une fragilit√© osseuse, des troubles de la reproduction ont √©galement √©t√© r√©pertori√©s, ainsi qu‚Äôun risque accru de cancer ayant donn√© lieu √† un classement comme ¬´ canc√©rog√®ne pour l‚Äôhomme ¬ª (groupe 1) par le Centre International de Recherche sur le Cancer (CIRC) en 1993.")
            elif contrib_option_substances_ino_mb == 'Aluminium':
                st.caption("L‚Äôaluminium (Al) est l‚Äô√©l√©ment m√©tallique le plus abondant de la cro√ªte terrestre. Du fait de ses propri√©t√©s physico-chimiques (basse densit√©, mall√©abilit√©, r√©sistance √† la corrosion, etc.), il est utilis√© dans de nombreux domaines industriels (agro-alimentaire, pharmaceutique, b√¢timent, etc.) et pour le traitement des eaux d‚Äôalimentation. Il est pr√©sent dans les aliments et l‚Äôeau sous diff√©rentes formes chimiques qui d√©terminent sa toxicit√©. Les effets toxiques de l‚Äôaluminium portent essentiellement sur le syst√®me nerveux central (enc√©phalopathies, troubles psychomoteurs) et sur le tissu osseux. Chez l‚Äôhomme, ces effets sont observ√©s chez des sujets expos√©s par d‚Äôautres voies que l‚Äôalimentation, conduisant √† l‚Äôaccumulation de fortes quantit√©s d‚Äôaluminium : patients insuffisants r√©naux dialys√©s, alimentation parent√©rale, personnes professionnellement expos√©es. ")
            elif contrib_option_substances_ino_mb == 'Antimoine':
                st.caption("L‚Äôantimoine (Sb) est un m√©tallo√Øde tr√®s peu abondant dans la cro√ªte terrestre. Il est utilis√© dans les alliages m√©talliques pour en accro√Ætre la duret√©, dans la fabrication de semi-conducteurs, dans les plastiques et les feux d‚Äôartifices. Le trioxyde d‚Äôantimoine est employ√© comme ignifugeant pour les textiles et les mati√®res plastiques, comme opacifiant pour les verres, les c√©ramiques et les √©maux, comme pigment pour les peintures et comme catalyseur chimique. Le trioxyde d‚Äôantimoine a √©t√© class√© consid√©r√© comme ¬´ peut-√™tre canc√©rog√®ne pour l‚Äôhomme ¬ª (groupe 2B) par le Centre International de Recherche sur le Cancer (CIRC) en 1989. Les sels solubles d‚Äôantimoine provoquent, apr√®s ingestion, des effets irritants au niveau gastro-intestinal se traduisant par des vomissements, des crampes abdominales et des diarrh√©es. Une toxicit√© cardiaque ou oculaire est aussi rapport√©e √† fortes doses. ")
            elif contrib_option_substances_ino_mb == 'Baryum':
                st.caption("Le baryum (Ba) est un m√©tal pr√©sent dans de nombreux minerais. Son utilisation concerne de nombreux domaines (pesticides, textiles, pigments, traitement d‚Äôeaux, m√©dical, etc.).Les sels solubles de baryum sont bien absorb√©s et se d√©posent essentiellement au niveau du tissu osseux. Il n‚Äôa pas √©t√© d√©montr√© d‚Äôeffet canc√©rog√®ne ni mutag√®ne (alt√©ration de la structure de l'ADN). Les travailleurs expos√©s r√©guli√®rement par inhalation au baryum peuvent pr√©senter des manifestations pulmonaires b√©nignes sans troubles fonctionnels associ√©s. ")
            elif contrib_option_substances_ino_mb == 'Gallium':
                st.caption("Le gallium (Ga) est un m√©tal provenant essentiellement de l‚Äôextraction de l‚Äôaluminium et du zinc. Essentiellement sous forme de sels, il est utilis√© en petite quantit√© pour la fabrication de semi-conducteurs, dans l‚Äôindustrie √©lectrique et √©lectronique ; c‚Äôest un substitut du mercure pour les lampes √† arc et les thermom√®tres pour hautes temp√©ratures. Plusieurs utilisations m√©dicales sont d√©crites : traceur radioactif, alliage dentaires, traitement des hypercalc√©mies tumorales. Dans le contexte de l‚Äôexposition professionnelle, le gallium et ses compos√©s p√©n√®trent par voie respiratoire, et tr√®s peu par voie digestive. La r√©tention de gallium au niveau pulmonaire est certaine chez l‚Äôanimal. L‚Äôabsorption √† partir du tube digestif semble faible. Il est transport√© par le sang, et se distribue dans le foie, la rate, les tissus osseux et la moelle osseuse. La toxicit√© est bas√©e essentiellement sur des √©tudes animales et varie selon les esp√®ces et les compos√©s du gallium. Les organes cibles sont le poumon, le syst√®me h√©matopo√Ø√©tique (ormation des globules sanguins), le syst√®me immunitaire, le rein et l‚Äôappareil reproducteur male.  L‚Äôars√©niure de gallium est class√© par le Centre International de Recherche sur le Cancer parmi les ¬´ canc√©rog√®nes pour l‚Äôhomme ¬ª (groupe 1) en s‚Äôappuyant surtout sur des donn√©es exp√©rimentales animales et sans en avoir d√©montr√© le m√©canisme d‚Äôaction.")
            elif contrib_option_substances_ino_mb == 'Germanium':
                st.caption("Le germanium (Ge) est un m√©tallo√Øde pr√©sent naturellement dans la cro√ªte terrestre. Il peut exister sous forme organique ou inorganique. G√©n√©ralement obtenu √† partir du raffinage du cuivre, du zinc et du plomb, il est utilis√© principalement dans le secteur de l‚Äô√©lectronique (diodes, transistors, etc.) et du verre (√©l√©ment optique) du fait de ses propri√©t√©s proches de celles du silicium. Dans certains pays, il est √©galement commercialis√© sous forme organique en tant que compl√©ment alimentaire. L‚Äôabsorption du germanium au niveau intestinal est rapide et compl√®te. Son √©limination est principalement urinaire. Il n‚Äôest ni mutag√®ne (alt√©ration de la structure de l'ADN), ni canc√©rig√®ne sous ses formes ioniques ou dioxyde de germanium. Plusieurs cas rapport√©s de patients expos√©s de mani√®re r√©p√©t√©e √† de fortes doses de germanium (compl√©ment alimentaire) indiquent notamment des perturbations au niveau r√©nal.")
            elif contrib_option_substances_ino_mb == 'Tellure':
                st.caption("Le tellure (Te) est un metallo√Øde issu principalement des r√©sidus d‚Äôaffinage du cuivre. Il est utilis√© principalement en m√©tallurgie (alliage), dans l‚Äôindustrie chimique (caoutchouc, plastique) et dans l‚Äô√©lectronique. Le tellure est absorb√© par ingestion et √©limin√© en partie dans les urines. Il n‚Äôest ni mutag√®ne (alt√©ration de la structure de l'ADN), ni canc√©rog√®ne. Des effets t√©ratog√®nes (susceptible de provoquer des malformations cong√©nitales chez les enfants expos√©s in utero) ont √©t√© observ√©s chez des rats expos√©s oralement √† des doses √©lev√©es de tellure dans la nourriture. En milieu professionnel, l‚Äôexposition par inhalation au tellure peut engendrer des sympt√¥mes sans gravit√© particuli√®re, caract√©ris√©s essentiellement par une haleine alliac√©e.")
            elif contrib_option_substances_ino_mb == 'Vanadium':
                st.caption("Le vanadium (V) est un m√©tal que l‚Äôon retrouve √† l‚Äô√©tat naturel. Il est principalement utilis√© en m√©tallurgie pour augmenter la r√©sistance des aciers, et dans d‚Äôautres industries pour ses propri√©t√©s catalytiques, colorantes ou anticorrosives. Le r√¥le fonctionnel du vanadium n‚Äôa pas √©t√© clairement caract√©ris√© chez l‚Äôanimal ou chez l‚Äôhomme. Selon la dose, le vanadium pourrait avoir des effets sur les m√©tabolismes lipidique et glucidique et dans la fonction thyro√Ødienne. Le vanadium est peu absorb√© par voie orale (<1%). Chez l‚Äôanimal, les √©tudes exp√©rimentales indiquent que les effets les plus sensibles observ√©s suite √† l‚Äôingestion de sels de vanadium sont des perturbations au niveau sanguin (pression art√©rielle et taux de globules rouges), des syst√®mes nerveux et r√©nal et du d√©veloppement. Des √©tudes exp√©rimentales sur un compos√© de vanadium (le pentoxyde de vanadium) r√©v√®lent d‚Äôautres effets toxiques (atteinte de la rate, des reins, des poumons et cancers) mais la pr√©sence de cette forme dans les aliments n‚Äôa jamais √©t√© d√©montr√©e. ")
            elif contrib_option_substances_ino_mb == 'Nickel':
                st.caption("Le nickel (Ni) est un m√©tal naturellement pr√©sent dans la cro√ªte terrestre dont les propri√©t√©s de mall√©abilit√©, de magn√©tisme, de conduction de la chaleur et de l‚Äô√©lectricit√© conduisent √† le retrouver dans de tr√®s nombreuses applications industrielles principalement sous forme d‚Äôalliages (aciers inoxydables) et de catalyseurs pour les constructions automobile, navale et a√©ronautique, et les industries √©lectriques. Le nickel se retrouve sous une grande vari√©t√© de formes chimiques inorganiques (m√©tal, oxydes, sels) ou organiques. L‚Äôhomme y est expos√© par inhalation (exposition professionnelle), par la consommation d‚Äôeau et d‚Äôaliments et par contact cutan√©. Dans ce dernier cas, il est allergisant et peut provoquer une dermatite de contact. Les effets canc√©rog√®nes des compos√©s du nickel observ√©s apr√®s une exposition par inhalation ont conduit √† une classification par le Centre International de Recherche sur le Cancer (CIRC) parmi les ¬´ canc√©rog√®nes pour l‚Äôhomme ¬ª (groupe 1). Toutefois, aucune √©tude par voie orale n‚Äôa montr√© d‚Äôeffet canc√©rog√®ne. Aucun compos√© du nickel n‚Äôest actuellement class√© comme mutag√®ne (alt√©ration dela structure de l'ADN).")
            elif contrib_option_substances_ino_mb == 'Cobalt':
                st.caption("Le cobalt (Co) est un m√©tal naturellement pr√©sent dans la cro√ªte terrestre. Le cobalt et ses compos√©s min√©raux ont de nombreuses applications dans l‚Äôindustrie chimique et p√©troli√®re comme catalyseur, pour la fabrication d‚Äôalliages, comme pigment pour le verre et les c√©ramiques, comme agent s√©chant des peintures, etc. Il est √©galement utilis√© en tant qu‚Äôadditif dans les aliments pour animaux pour les esp√®ces capables de synth√©tiser la vitamine B12. On trouve le cobalt dans les produits animaux (sous forme de cobalamine) et dans les v√©g√©taux (sous forme inorganique). Chez l'homme, le cobalt absorb√© est majoritairement retrouv√© dans le foie et les reins. Chez l‚Äôanimal, les effets toxiques rapport√©s avec des sels de cobalt comprennent une polycyth√©mie (augmentation de la masse √©rythrocytaire totale), des modifications cardiaques, des alt√©rations fonctionnelles et morphologiques de la thyro√Øde, une d√©g√©n√©rescence et une atrophie testiculaires, une r√©duction de la croissance et de la survie de la descendance. Chez l‚Äôhomme, des cardiomyopathies ont √©t√© rapport√©es dans les ann√©es 60 chez des forts buveurs de bi√®re, auxquelles avait √©t√© ajout√© du cobalt en tant qu‚Äôagent stabilisateur de mousse. Les compos√©s du cobalt (II) ont √©t√© class√©s par le Centre International de Recherche surle Cancer (CIRC) comme ¬´ peut-√™tre canc√©rog√®nes pour l‚Äôhomme ¬ª (groupe 2B). Des √©tudes ont montr√© que les sels de cobalt sont capables d‚Äôinduire des alt√©rations g√©notoxiques tels que des dommages √† l‚ÄôADN, des mutations g√©niques, la formation de micronoyaux, des aberrations chromosomiques chez l‚Äôanimal par voie orale ou parent√©rale.")
            elif contrib_option_substances_ino_mb == 'Chrome':
                st.caption("Le chrome (Cr), un m√©tal abondant dans la cro√ªte terrestre, est utilis√© dans des alliages m√©talliques tels que l‚Äôacier inoxydable, en pigments, pour le tannage des peaux, etc. L‚Äôhomme y est expos√© par inhalation et par la consommation d‚Äôeau et d‚Äôaliments. Chez l‚Äôhomme, la d√©ficience en chrome a √©t√© observ√©e chez des patients recevant une nutrition parent√©rale totale sur le long terme. Les sympt√¥mes sont une alt√©ration de l‚Äôutilisation et de la tol√©rance au glucose, une alt√©ration du m√©tabolisme lipidique, une alt√©ration du m√©tabolisme de l‚Äôazote, une perte de poids. En cas de carences profondes, des effets neurologiques peuvent √™tre observ√©s. Chez l‚Äôenfant, aucune carence en chrome n‚Äôa √©t√© d√©crite en dehors d‚Äôune malnutrition prot√©ino-√©nerg√©tique s√©v√®re. Le chrome pr√©sente une toxicit√© nettement diff√©rente en fonction de sa valence. Diff√©rents compos√©s du chrome sont g√©notoxiques et sont class√©s par le Centre International de Recherche sur le Cancer comme ¬´ canc√©rog√®nes pour l‚Äôhomme ¬ª (groupe 1), du fait d‚Äôun exc√®s de risque de cancer du poumon chez les professionnels expos√©s par inhalation. Par voie orale, certaines donn√©es sugg√®rent une augmentation de l‚Äôincidence de cancer de l‚Äôestomac chez l‚ÄôHomme expos√© par l‚Äôeau de boisson. ")



        with tab3:
            
            col1, col2, col3= st.columns(3)

            with col3:
            
                #SelectBox
                contrib_option_substances_ino_lb = st.selectbox('S√©lectionner la substance que vous souhaitez analyser :',
                                                            df_contrib_LB_UB['Substance'].unique())
                # Convertir la valeur unique en liste
                selected_substances = [contrib_option_substances_ino_lb]
                # Filtrer les donn√©es en fonction des options s√©lectionn√©es
                df_filtered_contrib = df_contrib_LB_UB[df_contrib_LB_UB['Substance'].isin(selected_substances)]

                # Filtrer les donn√©es en fonction des options s√©lectionn√©es
                df_filtered_contrib = df_contrib_LB_UB[df_contrib_LB_UB['Substance'].isin([contrib_option_substances_ino_lb])]

            # V√©rifier si des substances et familles d'aliments ont √©t√© s√©lectionn√©es
            fig = px.bar(df_filtered_contrib, x='Contribution_LB', y="Groupe d'aliments",color_discrete_sequence=['#00AC8C']) 
            fig.update_xaxes(title="% de la contribution √† l‚Äôexposition totale")
            fig.update_yaxes(title=None)  # Supprime le titre de l'axe y
            fig.update_layout(
                    yaxis={'categoryorder': 'total ascending'},
                )
            st.plotly_chart(fig, use_container_width=True, sharing='streamlit')

            # Texte dynamique en fonction du choix de l'utilisateur
            if contrib_option_substances_ino_lb == 'Arsenic inorganique':
                st.caption("L‚Äôarsenic (As) est un √©l√©ment pr√©sent dans la cro√ªte terrestre. Il provient √©galement des activit√©s industrielles, de la combustion de produits fossiles, d'anciennes utilisations agricoles, etc. Il existe sous diff√©rentes formes chimiques, organiques ou inorganiques. Par ingestion, l‚Äôarsenic peut entra√Æner des l√©sions cutan√©es, des cancers, une toxicit√© sur le d√©veloppement, une neurotoxicit√©, des maladies cardiovasculaires, une perturbation du m√©tabolisme du glucose et du diab√®te.")
            elif contrib_option_substances_ino_lb == 'Plomb':
                st.caption("Le plomb (Pb) est un m√©tal naturellement pr√©sent dans la cro√ªte terrestre. Son utilisation intensive par l‚Äôhomme (activit√©s mini√®res et industrielles : fonderies, accumulateurs, pigments, alliages, munitions, etc.) est √† l‚Äôorigine d‚Äôune forte dispersion dans l‚Äôenvironnement. L‚Äôhomme y est expos√© principalement par les aliments et l‚Äôeau qu‚Äôil consomme, mais aussi via l‚Äôair, le sol et les poussi√®res. Du fait de son interdiction depuis la fin des ann√©es 90 dans l‚Äôessence automobile, les peintures utilis√©es √† l‚Äôint√©rieur des habitations et les canalisations d‚Äôeau, le niveau d‚Äôexposition a fortement diminu√© ces dix derni√®res ann√©es. Chez l‚Äôhomme, le principal organe cible est le syst√®me nerveux central, en particulier au cours du d√©veloppement chez le foetus et le jeune enfant. Chez l‚Äôadulte, le plomb a des effets sur les reins et sur le syst√®me cardiovasculaire.")
            elif contrib_option_substances_ino_lb == 'Cadmium':
                st.caption("Le cadmium (Cd) est un m√©tal lourd qui se retrouve dans les diff√©rents compartiments de l‚Äôenvironnement (sols, eau, air) du fait de sa pr√©sence √† l‚Äô√©tat naturel dans la cro√ªte terrestre et des activit√©s industrielles et agricoles.  La source principale d‚Äôexposition au cadmium varie selon le type de population : l‚Äôalimentation pour la population g√©n√©rale, la fum√©e de cigarette et l‚Äôair ambiant pour les travailleurs expos√©s en milieu industriel.Chez l‚Äôhomme, une exposition prolong√©e au cadmium par voie orale induit une atteinte r√©nale. Une fragilit√© osseuse, des troubles de la reproduction ont √©galement √©t√© r√©pertori√©s, ainsi qu‚Äôun risque accru de cancer ayant donn√© lieu √† un classement comme ¬´ canc√©rog√®ne pour l‚Äôhomme ¬ª (groupe 1) par le Centre International de Recherche sur le Cancer (CIRC) en 1993.")
            elif contrib_option_substances_ino_lb == 'Aluminium':
                st.caption("L‚Äôaluminium (Al) est l‚Äô√©l√©ment m√©tallique le plus abondant de la cro√ªte terrestre. Du fait de ses propri√©t√©s physico-chimiques (basse densit√©, mall√©abilit√©, r√©sistance √† la corrosion, etc.), il est utilis√© dans de nombreux domaines industriels (agro-alimentaire, pharmaceutique, b√¢timent, etc.) et pour le traitement des eaux d‚Äôalimentation. Il est pr√©sent dans les aliments et l‚Äôeau sous diff√©rentes formes chimiques qui d√©terminent sa toxicit√©. Les effets toxiques de l‚Äôaluminium portent essentiellement sur le syst√®me nerveux central (enc√©phalopathies, troubles psychomoteurs) et sur le tissu osseux. Chez l‚Äôhomme, ces effets sont observ√©s chez des sujets expos√©s par d‚Äôautres voies que l‚Äôalimentation, conduisant √† l‚Äôaccumulation de fortes quantit√©s d‚Äôaluminium : patients insuffisants r√©naux dialys√©s, alimentation parent√©rale, personnes professionnellement expos√©es. ")
            elif contrib_option_substances_ino_lb == 'Antimoine':
                st.caption("L‚Äôantimoine (Sb) est un m√©tallo√Øde tr√®s peu abondant dans la cro√ªte terrestre. Il est utilis√© dans les alliages m√©talliques pour en accro√Ætre la duret√©, dans la fabrication de semi-conducteurs, dans les plastiques et les feux d‚Äôartifices. Le trioxyde d‚Äôantimoine est employ√© comme ignifugeant pour les textiles et les mati√®res plastiques, comme opacifiant pour les verres, les c√©ramiques et les √©maux, comme pigment pour les peintures et comme catalyseur chimique. Le trioxyde d‚Äôantimoine a √©t√© class√© consid√©r√© comme ¬´ peut-√™tre canc√©rog√®ne pour l‚Äôhomme ¬ª (groupe 2B) par le Centre International de Recherche sur le Cancer (CIRC) en 1989. Les sels solubles d‚Äôantimoine provoquent, apr√®s ingestion, des effets irritants au niveau gastro-intestinal se traduisant par des vomissements, des crampes abdominales et des diarrh√©es. Une toxicit√© cardiaque ou oculaire est aussi rapport√©e √† fortes doses. ")
            elif contrib_option_substances_ino_lb == 'Baryum':
                st.caption("Le baryum (Ba) est un m√©tal pr√©sent dans de nombreux minerais. Son utilisation concerne de nombreux domaines (pesticides, textiles, pigments, traitement d‚Äôeaux, m√©dical, etc.).Les sels solubles de baryum sont bien absorb√©s et se d√©posent essentiellement au niveau du tissu osseux. Il n‚Äôa pas √©t√© d√©montr√© d‚Äôeffet canc√©rog√®ne ni mutag√®ne (alt√©ration de la structure de l'ADN). Les travailleurs expos√©s r√©guli√®rement par inhalation au baryum peuvent pr√©senter des manifestations pulmonaires b√©nignes sans troubles fonctionnels associ√©s. ")
            elif contrib_option_substances_ino_lb == 'Gallium':
                st.caption("Le gallium (Ga) est un m√©tal provenant essentiellement de l‚Äôextraction de l‚Äôaluminium et du zinc. Essentiellement sous forme de sels, il est utilis√© en petite quantit√© pour la fabrication de semi-conducteurs, dans l‚Äôindustrie √©lectrique et √©lectronique ; c‚Äôest un substitut du mercure pour les lampes √† arc et les thermom√®tres pour hautes temp√©ratures. Plusieurs utilisations m√©dicales sont d√©crites : traceur radioactif, alliage dentaires, traitement des hypercalc√©mies tumorales. Dans le contexte de l‚Äôexposition professionnelle, le gallium et ses compos√©s p√©n√®trent par voie respiratoire, et tr√®s peu par voie digestive. La r√©tention de gallium au niveau pulmonaire est certaine chez l‚Äôanimal. L‚Äôabsorption √† partir du tube digestif semble faible. Il est transport√© par le sang, et se distribue dans le foie, la rate, les tissus osseux et la moelle osseuse. La toxicit√© est bas√©e essentiellement sur des √©tudes animales et varie selon les esp√®ces et les compos√©s du gallium. Les organes cibles sont le poumon, le syst√®me h√©matopo√Ø√©tique (ormation des globules sanguins), le syst√®me immunitaire, le rein et l‚Äôappareil reproducteur male.  L‚Äôars√©niure de gallium est class√© par le Centre International de Recherche sur le Cancer parmi les ¬´ canc√©rog√®nes pour l‚Äôhomme ¬ª (groupe 1) en s‚Äôappuyant surtout sur des donn√©es exp√©rimentales animales et sans en avoir d√©montr√© le m√©canisme d‚Äôaction.")
            elif contrib_option_substances_ino_lb == 'Germanium':
                st.caption("Le germanium (Ge) est un m√©tallo√Øde pr√©sent naturellement dans la cro√ªte terrestre. Il peut exister sous forme organique ou inorganique. G√©n√©ralement obtenu √† partir du raffinage du cuivre, du zinc et du plomb, il est utilis√© principalement dans le secteur de l‚Äô√©lectronique (diodes, transistors, etc.) et du verre (√©l√©ment optique) du fait de ses propri√©t√©s proches de celles du silicium. Dans certains pays, il est √©galement commercialis√© sous forme organique en tant que compl√©ment alimentaire. L‚Äôabsorption du germanium au niveau intestinal est rapide et compl√®te. Son √©limination est principalement urinaire. Il n‚Äôest ni mutag√®ne (alt√©ration de la structure de l'ADN), ni canc√©rig√®ne sous ses formes ioniques ou dioxyde de germanium. Plusieurs cas rapport√©s de patients expos√©s de mani√®re r√©p√©t√©e √† de fortes doses de germanium (compl√©ment alimentaire) indiquent notamment des perturbations au niveau r√©nal.")
            elif contrib_option_substances_ino_lb == 'Tellure':
                st.caption("Le tellure (Te) est un metallo√Øde issu principalement des r√©sidus d‚Äôaffinage du cuivre. Il est utilis√© principalement en m√©tallurgie (alliage), dans l‚Äôindustrie chimique (caoutchouc, plastique) et dans l‚Äô√©lectronique. Le tellure est absorb√© par ingestion et √©limin√© en partie dans les urines. Il n‚Äôest ni mutag√®ne (alt√©ration de la structure de l'ADN), ni canc√©rog√®ne. Des effets t√©ratog√®nes (susceptible de provoquer des malformations cong√©nitales chez les enfants expos√©s in utero) ont √©t√© observ√©s chez des rats expos√©s oralement √† des doses √©lev√©es de tellure dans la nourriture. En milieu professionnel, l‚Äôexposition par inhalation au tellure peut engendrer des sympt√¥mes sans gravit√© particuli√®re, caract√©ris√©s essentiellement par une haleine alliac√©e.")
            elif contrib_option_substances_ino_lb == 'Vanadium':
                st.caption("Le vanadium (V) est un m√©tal que l‚Äôon retrouve √† l‚Äô√©tat naturel. Il est principalement utilis√© en m√©tallurgie pour augmenter la r√©sistance des aciers, et dans d‚Äôautres industries pour ses propri√©t√©s catalytiques, colorantes ou anticorrosives. Le r√¥le fonctionnel du vanadium n‚Äôa pas √©t√© clairement caract√©ris√© chez l‚Äôanimal ou chez l‚Äôhomme. Selon la dose, le vanadium pourrait avoir des effets sur les m√©tabolismes lipidique et glucidique et dans la fonction thyro√Ødienne. Le vanadium est peu absorb√© par voie orale (<1%). Chez l‚Äôanimal, les √©tudes exp√©rimentales indiquent que les effets les plus sensibles observ√©s suite √† l‚Äôingestion de sels de vanadium sont des perturbations au niveau sanguin (pression art√©rielle et taux de globules rouges), des syst√®mes nerveux et r√©nal et du d√©veloppement. Des √©tudes exp√©rimentales sur un compos√© de vanadium (le pentoxyde de vanadium) r√©v√®lent d‚Äôautres effets toxiques (atteinte de la rate, des reins, des poumons et cancers) mais la pr√©sence de cette forme dans les aliments n‚Äôa jamais √©t√© d√©montr√©e. ")
            elif contrib_option_substances_ino_lb == 'Nickel':
                st.caption("Le nickel (Ni) est un m√©tal naturellement pr√©sent dans la cro√ªte terrestre dont les propri√©t√©s de mall√©abilit√©, de magn√©tisme, de conduction de la chaleur et de l‚Äô√©lectricit√© conduisent √† le retrouver dans de tr√®s nombreuses applications industrielles principalement sous forme d‚Äôalliages (aciers inoxydables) et de catalyseurs pour les constructions automobile, navale et a√©ronautique, et les industries √©lectriques. Le nickel se retrouve sous une grande vari√©t√© de formes chimiques inorganiques (m√©tal, oxydes, sels) ou organiques. L‚Äôhomme y est expos√© par inhalation (exposition professionnelle), par la consommation d‚Äôeau et d‚Äôaliments et par contact cutan√©. Dans ce dernier cas, il est allergisant et peut provoquer une dermatite de contact. Les effets canc√©rog√®nes des compos√©s du nickel observ√©s apr√®s une exposition par inhalation ont conduit √† une classification par le Centre International de Recherche sur le Cancer (CIRC) parmi les ¬´ canc√©rog√®nes pour l‚Äôhomme ¬ª (groupe 1). Toutefois, aucune √©tude par voie orale n‚Äôa montr√© d‚Äôeffet canc√©rog√®ne. Aucun compos√© du nickel n‚Äôest actuellement class√© comme mutag√®ne (alt√©ration dela structure de l'ADN).")
            elif contrib_option_substances_ino_lb == 'Cobalt':
                st.caption("Le cobalt (Co) est un m√©tal naturellement pr√©sent dans la cro√ªte terrestre. Le cobalt et ses compos√©s min√©raux ont de nombreuses applications dans l‚Äôindustrie chimique et p√©troli√®re comme catalyseur, pour la fabrication d‚Äôalliages, comme pigment pour le verre et les c√©ramiques, comme agent s√©chant des peintures, etc. Il est √©galement utilis√© en tant qu‚Äôadditif dans les aliments pour animaux pour les esp√®ces capables de synth√©tiser la vitamine B12. On trouve le cobalt dans les produits animaux (sous forme de cobalamine) et dans les v√©g√©taux (sous forme inorganique). Chez l'homme, le cobalt absorb√© est majoritairement retrouv√© dans le foie et les reins. Chez l‚Äôanimal, les effets toxiques rapport√©s avec des sels de cobalt comprennent une polycyth√©mie (augmentation de la masse √©rythrocytaire totale), des modifications cardiaques, des alt√©rations fonctionnelles et morphologiques de la thyro√Øde, une d√©g√©n√©rescence et une atrophie testiculaires, une r√©duction de la croissance et de la survie de la descendance. Chez l‚Äôhomme, des cardiomyopathies ont √©t√© rapport√©es dans les ann√©es 60 chez des forts buveurs de bi√®re, auxquelles avait √©t√© ajout√© du cobalt en tant qu‚Äôagent stabilisateur de mousse. Les compos√©s du cobalt (II) ont √©t√© class√©s par le Centre International de Recherche surle Cancer (CIRC) comme ¬´ peut-√™tre canc√©rog√®nes pour l‚Äôhomme ¬ª (groupe 2B). Des √©tudes ont montr√© que les sels de cobalt sont capables d‚Äôinduire des alt√©rations g√©notoxiques tels que des dommages √† l‚ÄôADN, des mutations g√©niques, la formation de micronoyaux, des aberrations chromosomiques chez l‚Äôanimal par voie orale ou parent√©rale.")
            elif contrib_option_substances_ino_lb == 'Chrome':
                st.caption("Le chrome (Cr), un m√©tal abondant dans la cro√ªte terrestre, est utilis√© dans des alliages m√©talliques tels que l‚Äôacier inoxydable, en pigments, pour le tannage des peaux, etc. L‚Äôhomme y est expos√© par inhalation et par la consommation d‚Äôeau et d‚Äôaliments. Chez l‚Äôhomme, la d√©ficience en chrome a √©t√© observ√©e chez des patients recevant une nutrition parent√©rale totale sur le long terme. Les sympt√¥mes sont une alt√©ration de l‚Äôutilisation et de la tol√©rance au glucose, une alt√©ration du m√©tabolisme lipidique, une alt√©ration du m√©tabolisme de l‚Äôazote, une perte de poids. En cas de carences profondes, des effets neurologiques peuvent √™tre observ√©s. Chez l‚Äôenfant, aucune carence en chrome n‚Äôa √©t√© d√©crite en dehors d‚Äôune malnutrition prot√©ino-√©nerg√©tique s√©v√®re. Le chrome pr√©sente une toxicit√© nettement diff√©rente en fonction de sa valence. Diff√©rents compos√©s du chrome sont g√©notoxiques et sont class√©s par le Centre International de Recherche sur le Cancer comme ¬´ canc√©rog√®nes pour l‚Äôhomme ¬ª (groupe 1), du fait d‚Äôun exc√®s de risque de cancer du poumon chez les professionnels expos√©s par inhalation. Par voie orale, certaines donn√©es sugg√®rent une augmentation de l‚Äôincidence de cancer de l‚Äôestomac chez l‚ÄôHomme expos√© par l‚Äôeau de boisson. ")


    
    if substances == "Phytoestrog√®nes":
        st.markdown("")
    
    if substances == "Mycotoxines":
        st.markdown("")
    
    if substances == "Additifs":
        st.markdown("")

    if substances == "Pesticides":
        st.markdown("")
    


    


# Donn√©es - M√©thodologie
if selected == 'Donn√©es - M√©thodologie':
    st.header("Donn√©es")
    st.markdown("Les donn√©es int√©gr√©es dans cet outil de visualisation sont issues de l‚Äô√©tude de l‚Äôalimentation totale (EAT2) men√©e par l‚ÄôAnses et publi√©e en 2014. Ces donn√©es sont accessibles sur data.gouv:")
    
    url = "https://www.data.gouv.fr/fr/datasets/donnees-regionales-eat2-etude-de-l-alimentation-totale/"
    st.markdown("[Donn√©es issues de l‚Äô√©tude EAT2 (Anses, 2014)](%s)" % url)
    url = "https://www.data.gouv.fr/fr/datasets/bisphenol-a/"
    st.markdown("[Donn√©es aux niveaux de concentration en BPA des diff√©rents aliments issus de l‚ÄôEAT2 (Anses, 2013) ](%s)" % url)
    
    st.header("M√©thodologie - Traitement des donn√©es")

    st.markdown("""La premi√®re √©tape du projet Caliviz a consist√© √† traiter les donn√©es inf√©rieures aux limites de d√©tection ou de quantification, dites donn√©es censur√©es, pour tenir compte des limites analytiques et des sp√©cificit√©s des diff√©rentes familles de substances. En fonction des substances et des groupes d‚Äôaliments pour lesquels les limites analytiques sont connues ou non, les donn√©es censur√©es √©taient renseign√©es dans les fichiers sous diff√©rents formats. Par cons√©quent, plusieurs pr√©traitements sp√©cifiques pour les diff√©rentes familles de substances ont √©t√© ainsi r√©alis√©s afin d'harmoniser l‚Äôensemble des donn√©es qui seront ensuite int√©gr√©es √† l‚Äôoutil de visualisation.

***Formatage de type 1 : Contaminants inorganiques et min√©raux - Acrylamide***\n
Dans ce cas, les donn√©es censur√©es sont uniquement sous la forme ‚ÄúND/NQ‚Äù et les limites analytiques sont connues. La contamination de chaque aliment par chaque substance est estim√©e en fonction des hypoth√®ses de censure comme suit:
* Hypoth√®se moyenne (MB) : ND = LOD/2 et NQ = LOQ/2
* Hypoth√®se basse (LB) : ND = 0 et NQ = LOD
* Hypoth√®se haute (UB) : ND = LOD et NQ = LOQ

***Formatage de type 2 : HAP - Dioxynes, PC8 - Perfluor√©s - Brom√©s***\n
Dans ce cas, les donn√©es censur√©es sont renseign√©es la forme ‚Äú<valeur‚Äù et que les limites de d√©tection et/ou de quantification ne sont pas connues. La contamination de chaque aliment par chaque substance est estim√©e en fonction des hypoth√®ses de censure comme suit: 
* Hypoth√®se moyenne (MB) : <valeur = valeur/2
* Hypoth√®se basse (LB) : <valeur = 0
* Hypoth√®se haute (UB) : <valeur = valeur\n

***Formatage de type 3 : Additifs - Pesticides***\n
Dans ce cas les donn√©es censur√©es sont sous la forme ND(valeur)/NQ(valeur) et que les limites analytiques ne sont pas fournies. La contamination de chaque aliment par chaque substance est estim√©e en fonction des hypoth√®ses de censure comme suit:
* Hypoth√®se moyenne (MB) : ND(valeur) = valeur/2 et NQ(valeur) = valeur/2
* Hypoth√®se basse (LB) : ND(valeur) = 0 et NQ(valeur) = 0
* Hypoth√®se haute (UB) : ND(valeur) = valeur et NQ(valeur) = valeur
""")

    st.subheader("Toutes les donn√©es pr√©trait√©es sont accessibles ici")
    def main():
        style = f"background-color: #5770BE; border-radius: 5px; padding: 10px; text-align: center; font-size: 16px; color: white;"
        button_html = f'<a href="https://gitlab.com/data-challenge-gd4h/caliviz" target="_blank" style="{style}">GitLab de nos donn√©es</a>'
        st.markdown(button_html, unsafe_allow_html=True)

    if __name__ == "__main__":
        main()
